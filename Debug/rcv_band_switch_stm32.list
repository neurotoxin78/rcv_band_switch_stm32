
rcv_band_switch_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004298  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002900  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d38  08006d38  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006d38  08006d38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d40  08006d40  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d40  08006d40  00016d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000088  08006dd0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08006dd0  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100a4  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025aa  00000000  00000000  0003015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00032708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017448  00000000  00000000  00033688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012677  00000000  00000000  0004aad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008f98c  00000000  00000000  0005d147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000ecad3  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000e58  00000000  00000000  000ecb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044a4  00000000  00000000  000ed980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004420 	.word	0x08004420

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08004420 	.word	0x08004420

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	4b31      	ldr	r3, [pc, #196]	; (8000664 <MX_GPIO_Init+0xe0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a30      	ldr	r2, [pc, #192]	; (8000664 <MX_GPIO_Init+0xe0>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <MX_GPIO_Init+0xe0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <MX_GPIO_Init+0xe0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a29      	ldr	r2, [pc, #164]	; (8000664 <MX_GPIO_Init+0xe0>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b27      	ldr	r3, [pc, #156]	; (8000664 <MX_GPIO_Init+0xe0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_GPIO_Init+0xe0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a22      	ldr	r2, [pc, #136]	; (8000664 <MX_GPIO_Init+0xe0>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <MX_GPIO_Init+0xe0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_GPIO_Init+0xe0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <MX_GPIO_Init+0xe0>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_GPIO_Init+0xe0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	211c      	movs	r1, #28
 800060e:	4816      	ldr	r0, [pc, #88]	; (8000668 <MX_GPIO_Init+0xe4>)
 8000610:	f001 fac0 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000614:	2301      	movs	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000618:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800061e:	2302      	movs	r3, #2
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	480f      	ldr	r0, [pc, #60]	; (8000668 <MX_GPIO_Init+0xe4>)
 800062a:	f001 f92f 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 800062e:	231c      	movs	r3, #28
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <MX_GPIO_Init+0xe4>)
 8000646:	f001 f921 	bl	800188c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	2006      	movs	r0, #6
 8000650:	f001 f8e5 	bl	800181e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000654:	2006      	movs	r0, #6
 8000656:	f001 f8fe 	bl	8001856 <HAL_NVIC_EnableIRQ>

}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	; 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40020000 	.word	0x40020000

0800066c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <MX_I2C1_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x50>)
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x58>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_I2C1_Init+0x50>)
 800068a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_I2C1_Init+0x50>)
 80006aa:	f001 faa5 	bl	8001bf8 <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f9da 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000a4 	.word	0x200000a4
 80006c0:	40005400 	.word	0x40005400
 80006c4:	000186a0 	.word	0x000186a0

080006c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a19      	ldr	r2, [pc, #100]	; (800074c <HAL_I2C_MspInit+0x84>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d12b      	bne.n	8000742 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <HAL_I2C_MspInit+0x88>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a17      	ldr	r2, [pc, #92]	; (8000750 <HAL_I2C_MspInit+0x88>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <HAL_I2C_MspInit+0x88>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000706:	23c0      	movs	r3, #192	; 0xc0
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800070a:	2312      	movs	r3, #18
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000716:	2304      	movs	r3, #4
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <HAL_I2C_MspInit+0x8c>)
 8000722:	f001 f8b3 	bl	800188c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_I2C_MspInit+0x88>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_I2C_MspInit+0x88>)
 8000730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000734:	6413      	str	r3, [r2, #64]	; 0x40
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_I2C_MspInit+0x88>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40005400 	.word	0x40005400
 8000750:	40023800 	.word	0x40023800
 8000754:	40020400 	.word	0x40020400

08000758 <display_init>:
static void setPWM(TIM_HandleTypeDef, uint32_t, uint16_t, uint16_t);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void display_init() {
 8000758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075a:	b095      	sub	sp, #84	; 0x54
 800075c:	af12      	add	r7, sp, #72	; 0x48
    ST7735_Init();
 800075e:	f000 faef 	bl	8000d40 <ST7735_Init>
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8000762:	2000      	movs	r0, #0
 8000764:	f000 fc3a 	bl	8000fdc <ST7735_FillScreen>
    //const char ready[] = "Ready!\r\n";
    //HAL_UART_Transmit(&huart2, (uint8_t*)ready, sizeof(ready)-1, HAL_MAX_DELAY);
    ST7735_WriteString(1, 25, "88 - 108 MHz", Font_11x18, ST7735_COLOR565(0, 116, 199), ST7735_BLACK);
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <display_init+0xa4>)
 800076a:	2200      	movs	r2, #0
 800076c:	9202      	str	r2, [sp, #8]
 800076e:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8000772:	9201      	str	r2, [sp, #4]
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	9200      	str	r2, [sp, #0]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a21      	ldr	r2, [pc, #132]	; (8000800 <display_init+0xa8>)
 800077c:	2119      	movs	r1, #25
 800077e:	2001      	movs	r0, #1
 8000780:	f000 fb6f 	bl	8000e62 <ST7735_WriteString>
    ST7735_WriteString(1, 0, "FM1", Font_16x26, ST7735_COLOR565(255, 187, 51), ST7735_BLACK);
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <display_init+0xac>)
 8000786:	2200      	movs	r2, #0
 8000788:	9202      	str	r2, [sp, #8]
 800078a:	f64f 52c6 	movw	r2, #64966	; 0xfdc6
 800078e:	9201      	str	r2, [sp, #4]
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	9200      	str	r2, [sp, #0]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <display_init+0xb0>)
 8000798:	2100      	movs	r1, #0
 800079a:	2001      	movs	r0, #1
 800079c:	f000 fb61 	bl	8000e62 <ST7735_WriteString>
    HAL_Delay(2000);
 80007a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007a4:	f000 ff3c 	bl	8001620 <HAL_Delay>
    for(int i=0; i<256; i++){
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	e01e      	b.n	80007ec <display_init+0x94>
    	setPWM(htim2, TIM_CHANNEL_1, 255, i);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	4e16      	ldr	r6, [pc, #88]	; (800080c <display_init+0xb4>)
 80007b4:	9310      	str	r3, [sp, #64]	; 0x40
 80007b6:	23ff      	movs	r3, #255	; 0xff
 80007b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80007ba:	2300      	movs	r3, #0
 80007bc:	930e      	str	r3, [sp, #56]	; 0x38
 80007be:	466d      	mov	r5, sp
 80007c0:	f106 0410 	add.w	r4, r6, #16
 80007c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80007d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80007d8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007dc:	f000 f916 	bl	8000a0c <setPWM>
    HAL_Delay(10);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f000 ff1d 	bl	8001620 <HAL_Delay>
    for(int i=0; i<256; i++){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3301      	adds	r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2bff      	cmp	r3, #255	; 0xff
 80007f0:	dddd      	ble.n	80007ae <display_init+0x56>
    }
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007fc:	20000008 	.word	0x20000008
 8000800:	08004438 	.word	0x08004438
 8000804:	20000010 	.word	0x20000010
 8000808:	08004448 	.word	0x08004448
 800080c:	20000164 	.word	0x20000164

08000810 <loop>:

void loop() {
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af04      	add	r7, sp, #16

    // Check fonts
    //ST7735_FillScreen(ST7735_BLACK);
    //ST7735_WriteString(0, 0, "Font_7x10", Font_7x10, ST7735_RED, ST7735_BLACK);

	int currCounter = __HAL_TIM_GET_COUNTER(&htim3);
 8000816:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <loop+0xd0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081c:	623b      	str	r3, [r7, #32]
	currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 800081e:	6a3b      	ldr	r3, [r7, #32]
 8000820:	3b01      	subs	r3, #1
 8000822:	b29b      	uxth	r3, r3
 8000824:	0fda      	lsrs	r2, r3, #31
 8000826:	4413      	add	r3, r2
 8000828:	105b      	asrs	r3, r3, #1
 800082a:	425b      	negs	r3, r3
 800082c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8000830:	337f      	adds	r3, #127	; 0x7f
 8000832:	623b      	str	r3, [r7, #32]
	if(currCounter != prevCounter) {
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <loop+0xd4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	6a3a      	ldr	r2, [r7, #32]
 800083a:	429a      	cmp	r2, r3
 800083c:	d019      	beq.n	8000872 <loop+0x62>
		char buff[16];
		snprintf(buff, sizeof(buff), "%06d", currCounter);
 800083e:	f107 0010 	add.w	r0, r7, #16
 8000842:	6a3b      	ldr	r3, [r7, #32]
 8000844:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <loop+0xd8>)
 8000846:	2110      	movs	r1, #16
 8000848:	f003 fa58 	bl	8003cfc <sniprintf>
		ST7735_WriteString(0, 46*1, buff, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <loop+0xdc>)
 800084e:	f107 0110 	add.w	r1, r7, #16
 8000852:	2200      	movs	r2, #0
 8000854:	9202      	str	r2, [sp, #8]
 8000856:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800085a:	9201      	str	r2, [sp, #4]
 800085c:	685a      	ldr	r2, [r3, #4]
 800085e:	9200      	str	r2, [sp, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	460a      	mov	r2, r1
 8000864:	212e      	movs	r1, #46	; 0x2e
 8000866:	2000      	movs	r0, #0
 8000868:	f000 fafb 	bl	8000e62 <ST7735_WriteString>
		prevCounter = currCounter;
 800086c:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <loop+0xd4>)
 800086e:	6a3b      	ldr	r3, [r7, #32]
 8000870:	6013      	str	r3, [r2, #0]
	}
	uint8_t buttonNumber = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(buttonNumber < sizeof(buttonPressed)/sizeof(buttonPressed[0])) {
 8000878:	e026      	b.n	80008c8 <loop+0xb8>
		if(buttonPressed[buttonNumber]) {
 800087a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <loop+0xe0>)
 8000880:	5cd3      	ldrb	r3, [r2, r3]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d01a      	beq.n	80008be <loop+0xae>
			buttonPressed[buttonNumber] = 0;
 8000888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800088c:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <loop+0xe0>)
 800088e:	2100      	movs	r1, #0
 8000890:	54d1      	strb	r1, [r2, r3]
			char buff[16];
			snprintf(buff, sizeof(buff), "BUTTON %d", buttonNumber);
 8000892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000896:	4638      	mov	r0, r7
 8000898:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <loop+0xe4>)
 800089a:	2110      	movs	r1, #16
 800089c:	f003 fa2e 	bl	8003cfc <sniprintf>
			ST7735_WriteString(80, 46*1, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <loop+0xdc>)
 80008a2:	4639      	mov	r1, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	9202      	str	r2, [sp, #8]
 80008a8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80008ac:	9201      	str	r2, [sp, #4]
 80008ae:	685a      	ldr	r2, [r3, #4]
 80008b0:	9200      	str	r2, [sp, #0]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	460a      	mov	r2, r1
 80008b6:	212e      	movs	r1, #46	; 0x2e
 80008b8:	2050      	movs	r0, #80	; 0x50
 80008ba:	f000 fad2 	bl	8000e62 <ST7735_WriteString>
		}
		buttonNumber++;
 80008be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008c2:	3301      	adds	r3, #1
 80008c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(buttonNumber < sizeof(buttonPressed)/sizeof(buttonPressed[0])) {
 80008c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	d9d4      	bls.n	800087a <loop+0x6a>
	}
    HAL_Delay(100);
 80008d0:	2064      	movs	r0, #100	; 0x64
 80008d2:	f000 fea5 	bl	8001620 <HAL_Delay>
}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200001ac 	.word	0x200001ac
 80008e4:	200000f8 	.word	0x200000f8
 80008e8:	0800444c 	.word	0x0800444c
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000154 	.word	0x20000154
 80008f4:	08004454 	.word	0x08004454

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 fe1e 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f81c 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f7ff fe3e 	bl	8000584 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000908:	f7ff feb0 	bl	800066c <MX_I2C1_Init>
  MX_SPI1_Init();
 800090c:	f000 f8b4 	bl	8000a78 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000910:	f000 fcc8 	bl	80012a4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000914:	f000 fc6c 	bl	80011f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000918:	213c      	movs	r1, #60	; 0x3c
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <main+0x3c>)
 800091c:	f002 fb8e 	bl	800303c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000920:	2104      	movs	r1, #4
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <main+0x40>)
 8000924:	f002 f9d0 	bl	8002cc8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  display_init();
 8000928:	f7ff ff16 	bl	8000758 <display_init>

  while (1)
  {
	 loop();
 800092c:	f7ff ff70 	bl	8000810 <loop>
 8000930:	e7fc      	b.n	800092c <main+0x34>
 8000932:	bf00      	nop
 8000934:	200001ac 	.word	0x200001ac
 8000938:	20000164 	.word	0x20000164

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0320 	add.w	r3, r7, #32
 8000946:	2230      	movs	r2, #48	; 0x30
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f003 f8de 	bl	8003b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <SystemClock_Config+0xc8>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a26      	ldr	r2, [pc, #152]	; (8000a04 <SystemClock_Config+0xc8>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <SystemClock_Config+0xc8>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <SystemClock_Config+0xcc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a20      	ldr	r2, [pc, #128]	; (8000a08 <SystemClock_Config+0xcc>)
 8000986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <SystemClock_Config+0xcc>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800099c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80009ac:	230c      	movs	r3, #12
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009b0:	2360      	movs	r3, #96	; 0x60
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 fa5d 	bl	8001e80 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009cc:	f000 f84e 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	230f      	movs	r3, #15
 80009d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	2302      	movs	r3, #2
 80009d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2103      	movs	r1, #3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fcbf 	bl	8002370 <HAL_RCC_ClockConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009f8:	f000 f838 	bl	8000a6c <Error_Handler>
  }
}
 80009fc:	bf00      	nop
 80009fe:	3750      	adds	r7, #80	; 0x50
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40007000 	.word	0x40007000

08000a0c <setPWM>:

/* USER CODE BEGIN 4 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b088      	sub	sp, #32
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000a18:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8000a1c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000a1e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000a22:	f002 fa01 	bl	8002e28 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period; // set the period duration
 8000a26:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8000a2c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000a30:	f002 f8fa 	bl	8002c28 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a34:	2360      	movs	r3, #96	; 0x60
 8000a36:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulse; // set the pulse duration
 8000a38:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000a3c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000a50:	f002 fc8a 	bl	8003368 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel);
 8000a54:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000a56:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000a5a:	f002 f935 	bl	8002cc8 <HAL_TIM_PWM_Start>
}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_SPI1_Init+0x64>)
 8000a7e:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_SPI1_Init+0x64>)
 8000a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_SPI1_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_SPI1_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_SPI1_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_SPI1_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_SPI1_Init+0x64>)
 8000aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_SPI1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <MX_SPI1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_SPI1_Init+0x64>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_SPI1_Init+0x64>)
 8000aca:	f001 fe1d 	bl	8002708 <HAL_SPI_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ad4:	f7ff ffca 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200000fc 	.word	0x200000fc
 8000ae0:	40013000 	.word	0x40013000

08000ae4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <HAL_SPI_MspInit+0x84>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d12b      	bne.n	8000b5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_SPI_MspInit+0x88>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_SPI_MspInit+0x88>)
 8000b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_SPI_MspInit+0x88>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_SPI_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <HAL_SPI_MspInit+0x88>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_SPI_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b3e:	23a0      	movs	r3, #160	; 0xa0
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b4e:	2305      	movs	r3, #5
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <HAL_SPI_MspInit+0x8c>)
 8000b5a:	f000 fe97 	bl	800188c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40013000 	.word	0x40013000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000

08000b74 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <ST7735_Select+0x14>)
 8000b7e:	f001 f809 	bl	8001b94 <HAL_GPIO_WritePin>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40020000 	.word	0x40020000

08000b8c <ST7735_Unselect>:

void ST7735_Unselect() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2110      	movs	r1, #16
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <ST7735_Unselect+0x14>)
 8000b96:	f000 fffd 	bl	8001b94 <HAL_GPIO_WritePin>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <ST7735_Reset>:

static void ST7735_Reset() {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2108      	movs	r1, #8
 8000bac:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <ST7735_Reset+0x24>)
 8000bae:	f000 fff1 	bl	8001b94 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000bb2:	2005      	movs	r0, #5
 8000bb4:	f000 fd34 	bl	8001620 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2108      	movs	r1, #8
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <ST7735_Reset+0x24>)
 8000bbe:	f000 ffe9 	bl	8001b94 <HAL_GPIO_WritePin>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020000 	.word	0x40020000

08000bcc <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2104      	movs	r1, #4
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <ST7735_WriteCommand+0x2c>)
 8000bdc:	f000 ffda 	bl	8001b94 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000be0:	1df9      	adds	r1, r7, #7
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	2201      	movs	r2, #1
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <ST7735_WriteCommand+0x30>)
 8000bea:	f001 fe16 	bl	800281a <HAL_SPI_Transmit>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	200000fc 	.word	0x200000fc

08000c00 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <ST7735_WriteData+0x2c>)
 8000c10:	f000 ffc0 	bl	8001b94 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <ST7735_WriteData+0x30>)
 8000c20:	f001 fdfb 	bl	800281a <HAL_SPI_Transmit>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	200000fc 	.word	0x200000fc

08000c34 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000c46:	e034      	b.n	8000cb2 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000c52:	7afb      	ldrb	r3, [r7, #11]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ffb9 	bl	8000bcc <ST7735_WriteCommand>

        numArgs = *addr++;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000c64:	7abb      	ldrb	r3, [r7, #10]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000c6e:	7abb      	ldrb	r3, [r7, #10]
 8000c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c74:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000c76:	7abb      	ldrb	r3, [r7, #10]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d008      	beq.n	8000c8e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000c7c:	7abb      	ldrb	r3, [r7, #10]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ffbd 	bl	8000c00 <ST7735_WriteData>
            addr += numArgs;
 8000c86:	7abb      	ldrb	r3, [r7, #10]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000c8e:	89bb      	ldrh	r3, [r7, #12]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d00e      	beq.n	8000cb2 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000c9e:	89bb      	ldrh	r3, [r7, #12]
 8000ca0:	2bff      	cmp	r3, #255	; 0xff
 8000ca2:	d102      	bne.n	8000caa <ST7735_ExecuteCommandList+0x76>
 8000ca4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ca8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000caa:	89bb      	ldrh	r3, [r7, #12]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fcb7 	bl	8001620 <HAL_Delay>
    while(numCommands--) {
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	73fa      	strb	r2, [r7, #15]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1c5      	bne.n	8000c48 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000cc6:	b590      	push	{r4, r7, lr}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4604      	mov	r4, r0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4623      	mov	r3, r4
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71bb      	strb	r3, [r7, #6]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	717b      	strb	r3, [r7, #5]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000ce4:	202a      	movs	r0, #42	; 0x2a
 8000ce6:	f7ff ff71 	bl	8000bcc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000cea:	2300      	movs	r3, #0
 8000cec:	733b      	strb	r3, [r7, #12]
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	737b      	strb	r3, [r7, #13]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
 8000cfa:	797b      	ldrb	r3, [r7, #5]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2104      	movs	r1, #4
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff79 	bl	8000c00 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000d0e:	202b      	movs	r0, #43	; 0x2b
 8000d10:	f7ff ff5c 	bl	8000bcc <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000d14:	79bb      	ldrb	r3, [r7, #6]
 8000d16:	331a      	adds	r3, #26
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000d1c:	793b      	ldrb	r3, [r7, #4]
 8000d1e:	331a      	adds	r3, #26
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2104      	movs	r1, #4
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff68 	bl	8000c00 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000d30:	202c      	movs	r0, #44	; 0x2c
 8000d32:	f7ff ff4b 	bl	8000bcc <ST7735_WriteCommand>
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd90      	pop	{r4, r7, pc}
	...

08000d40 <ST7735_Init>:

void ST7735_Init() {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000d44:	f7ff ff16 	bl	8000b74 <ST7735_Select>
    ST7735_Reset();
 8000d48:	f7ff ff2c 	bl	8000ba4 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000d4c:	4806      	ldr	r0, [pc, #24]	; (8000d68 <ST7735_Init+0x28>)
 8000d4e:	f7ff ff71 	bl	8000c34 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <ST7735_Init+0x2c>)
 8000d54:	f7ff ff6e 	bl	8000c34 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <ST7735_Init+0x30>)
 8000d5a:	f7ff ff6b 	bl	8000c34 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000d5e:	f7ff ff15 	bl	8000b8c <ST7735_Unselect>
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	08006c74 	.word	0x08006c74
 8000d6c:	08006cb0 	.word	0x08006cb0
 8000d70:	08006cc0 	.word	0x08006cc0

08000d74 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000d74:	b082      	sub	sp, #8
 8000d76:	b590      	push	{r4, r7, lr}
 8000d78:	b089      	sub	sp, #36	; 0x24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80fb      	strh	r3, [r7, #6]
 8000d82:	460b      	mov	r3, r1
 8000d84:	80bb      	strh	r3, [r7, #4]
 8000d86:	4613      	mov	r3, r2
 8000d88:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	b2d8      	uxtb	r0, r3
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	b2d9      	uxtb	r1, r3
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b2dc      	uxtb	r4, r3
 8000da2:	88bb      	ldrh	r3, [r7, #4]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000daa:	4413      	add	r3, r2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	3b01      	subs	r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	4622      	mov	r2, r4
 8000db4:	f7ff ff87 	bl	8000cc6 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
 8000dbc:	e043      	b.n	8000e46 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	3b20      	subs	r3, #32
 8000dc4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000dc8:	fb01 f303 	mul.w	r3, r1, r3
 8000dcc:	4619      	mov	r1, r3
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	440b      	add	r3, r1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	e029      	b.n	8000e34 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00e      	beq.n	8000e0e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000df0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	743b      	strb	r3, [r7, #16]
 8000dfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2102      	movs	r1, #2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fefa 	bl	8000c00 <ST7735_WriteData>
 8000e0c:	e00f      	b.n	8000e2e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000e0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	733b      	strb	r3, [r7, #12]
 8000e1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2102      	movs	r1, #2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fee9 	bl	8000c00 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	3301      	adds	r3, #1
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e38:	461a      	mov	r2, r3
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d3cf      	bcc.n	8000de0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	3301      	adds	r3, #1
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d3b5      	bcc.n	8000dbe <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	3724      	adds	r7, #36	; 0x24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e5e:	b002      	add	sp, #8
 8000e60:	4770      	bx	lr

08000e62 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000e62:	b082      	sub	sp, #8
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af04      	add	r7, sp, #16
 8000e6a:	603a      	str	r2, [r7, #0]
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
 8000e72:	460b      	mov	r3, r1
 8000e74:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000e76:	f7ff fe7d 	bl	8000b74 <ST7735_Select>

    while(*str) {
 8000e7a:	e02d      	b.n	8000ed8 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	7d3a      	ldrb	r2, [r7, #20]
 8000e80:	4413      	add	r3, r2
 8000e82:	2b9f      	cmp	r3, #159	; 0x9f
 8000e84:	dd13      	ble.n	8000eae <ST7735_WriteString+0x4c>
            x = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000e8a:	7d7b      	ldrb	r3, [r7, #21]
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	88bb      	ldrh	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000e94:	88bb      	ldrh	r3, [r7, #4]
 8000e96:	7d7a      	ldrb	r2, [r7, #21]
 8000e98:	4413      	add	r3, r2
 8000e9a:	2b4f      	cmp	r3, #79	; 0x4f
 8000e9c:	dc21      	bgt.n	8000ee2 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b20      	cmp	r3, #32
 8000ea4:	d103      	bne.n	8000eae <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	603b      	str	r3, [r7, #0]
                continue;
 8000eac:	e014      	b.n	8000ed8 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	88b9      	ldrh	r1, [r7, #4]
 8000eb4:	88f8      	ldrh	r0, [r7, #6]
 8000eb6:	8c3b      	ldrh	r3, [r7, #32]
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	8bbb      	ldrh	r3, [r7, #28]
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f7ff ff56 	bl	8000d74 <ST7735_WriteChar>
        x += font.width;
 8000ec8:	7d3b      	ldrb	r3, [r7, #20]
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	4413      	add	r3, r2
 8000ed0:	80fb      	strh	r3, [r7, #6]
        str++;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1cd      	bne.n	8000e7c <ST7735_WriteString+0x1a>
 8000ee0:	e000      	b.n	8000ee4 <ST7735_WriteString+0x82>
                break;
 8000ee2:	bf00      	nop
    }

    ST7735_Unselect();
 8000ee4:	f7ff fe52 	bl	8000b8c <ST7735_Unselect>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ef2:	b002      	add	sp, #8
 8000ef4:	4770      	bx	lr
	...

08000ef8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4604      	mov	r4, r0
 8000f00:	4608      	mov	r0, r1
 8000f02:	4611      	mov	r1, r2
 8000f04:	461a      	mov	r2, r3
 8000f06:	4623      	mov	r3, r4
 8000f08:	80fb      	strh	r3, [r7, #6]
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80bb      	strh	r3, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	807b      	strh	r3, [r7, #2]
 8000f12:	4613      	mov	r3, r2
 8000f14:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	2b9f      	cmp	r3, #159	; 0x9f
 8000f1a:	d857      	bhi.n	8000fcc <ST7735_FillRectangle+0xd4>
 8000f1c:	88bb      	ldrh	r3, [r7, #4]
 8000f1e:	2b4f      	cmp	r3, #79	; 0x4f
 8000f20:	d854      	bhi.n	8000fcc <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000f22:	88fa      	ldrh	r2, [r7, #6]
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	4413      	add	r3, r2
 8000f28:	2ba0      	cmp	r3, #160	; 0xa0
 8000f2a:	dd03      	ble.n	8000f34 <ST7735_FillRectangle+0x3c>
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000f32:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000f34:	88ba      	ldrh	r2, [r7, #4]
 8000f36:	883b      	ldrh	r3, [r7, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	2b50      	cmp	r3, #80	; 0x50
 8000f3c:	dd03      	ble.n	8000f46 <ST7735_FillRectangle+0x4e>
 8000f3e:	88bb      	ldrh	r3, [r7, #4]
 8000f40:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000f44:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000f46:	f7ff fe15 	bl	8000b74 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	b2d8      	uxtb	r0, r3
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	b2d9      	uxtb	r1, r3
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4413      	add	r3, r2
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	b2dc      	uxtb	r4, r3
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	883b      	ldrh	r3, [r7, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4622      	mov	r2, r4
 8000f74:	f7ff fea7 	bl	8000cc6 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000f78:	8c3b      	ldrh	r3, [r7, #32]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	733b      	strb	r3, [r7, #12]
 8000f82:	8c3b      	ldrh	r3, [r7, #32]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <ST7735_FillRectangle+0xdc>)
 8000f8e:	f000 fe01 	bl	8001b94 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000f92:	883b      	ldrh	r3, [r7, #0]
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	e013      	b.n	8000fc0 <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	80fb      	strh	r3, [r7, #6]
 8000f9c:	e00a      	b.n	8000fb4 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000f9e:	f107 010c 	add.w	r1, r7, #12
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <ST7735_FillRectangle+0xe0>)
 8000faa:	f001 fc36 	bl	800281a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	80fb      	strh	r3, [r7, #6]
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f1      	bne.n	8000f9e <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8000fba:	88bb      	ldrh	r3, [r7, #4]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	80bb      	strh	r3, [r7, #4]
 8000fc0:	88bb      	ldrh	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1e8      	bne.n	8000f98 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8000fc6:	f7ff fde1 	bl	8000b8c <ST7735_Unselect>
 8000fca:	e000      	b.n	8000fce <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000fcc:	bf00      	nop
}
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	200000fc 	.word	0x200000fc

08000fdc <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2350      	movs	r3, #80	; 0x50
 8000fec:	22a0      	movs	r2, #160	; 0xa0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff ff81 	bl	8000ef8 <ST7735_FillRectangle>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_MspInit+0x4c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a0f      	ldr	r2, [pc, #60]	; (800104c <HAL_MspInit+0x4c>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_MspInit+0x4c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_MspInit+0x4c>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <HAL_MspInit+0x4c>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_MspInit+0x4c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 faa0 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 fd8d 	bl	8001bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <TIM2_IRQHandler+0x10>)
 80010ba:	f002 f84d 	bl	8003158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000164 	.word	0x20000164

080010c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <TIM3_IRQHandler+0x28>)
 80010ce:	f002 f843 	bl	8003158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(TIM3->SR & TIM_SR_TIF){
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <TIM3_IRQHandler+0x2c>)
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <TIM3_IRQHandler+0x22>
		/* Here code to execute */


		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <TIM3_IRQHandler+0x2c>)
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <TIM3_IRQHandler+0x2c>)
 80010e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010e8:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001ac 	.word	0x200001ac
 80010f4:	40000400 	.word	0x40000400

080010f8 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI15_10_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 fd63 	bl	8001bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
	int8_t buttonNumber = -1;
 8001112:	23ff      	movs	r3, #255	; 0xff
 8001114:	73fb      	strb	r3, [r7, #15]

    if(GPIO_Pin == BTN_Pin) {
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d101      	bne.n	8001120 <HAL_GPIO_EXTI_Callback+0x18>
		buttonNumber = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
    }

	if(buttonNumber < 0) {
 8001120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db11      	blt.n	800114c <HAL_GPIO_EXTI_Callback+0x44>
		return;
	}

	// debounce
    uint32_t tstamp = HAL_GetTick();
 8001128:	f000 fa6e 	bl	8001608 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
    if(tstamp - lastPressed < 100)
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_GPIO_EXTI_Callback+0x50>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b63      	cmp	r3, #99	; 0x63
 8001138:	d90a      	bls.n	8001150 <HAL_GPIO_EXTI_Callback+0x48>
        return;
    lastPressed = tstamp;
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_GPIO_EXTI_Callback+0x50>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	6013      	str	r3, [r2, #0]

    buttonPressed[buttonNumber] = 1;
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001144:	4a05      	ldr	r2, [pc, #20]	; (800115c <HAL_GPIO_EXTI_Callback+0x54>)
 8001146:	2101      	movs	r1, #1
 8001148:	54d1      	strb	r1, [r2, r3]
 800114a:	e002      	b.n	8001152 <HAL_GPIO_EXTI_Callback+0x4a>
		return;
 800114c:	bf00      	nop
 800114e:	e000      	b.n	8001152 <HAL_GPIO_EXTI_Callback+0x4a>
        return;
 8001150:	bf00      	nop
}
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000015c 	.word	0x2000015c
 800115c:	20000154 	.word	0x20000154

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f002 fc92 	bl	8003ab8 <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20020000 	.word	0x20020000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	20000160 	.word	0x20000160
 80011c8:	20000208 	.word	0x20000208

080011cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <MX_TIM2_Init+0xb0>)
 8001214:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001218:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <MX_TIM2_Init+0xb0>)
 800121c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001220:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MX_TIM2_Init+0xb0>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <MX_TIM2_Init+0xb0>)
 800122a:	f241 3288 	movw	r2, #5000	; 0x1388
 800122e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_TIM2_Init+0xb0>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_TIM2_Init+0xb0>)
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800123c:	4818      	ldr	r0, [pc, #96]	; (80012a0 <MX_TIM2_Init+0xb0>)
 800123e:	f001 fcf3 	bl	8002c28 <HAL_TIM_PWM_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001248:	f7ff fc10 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800124c:	2310      	movs	r3, #16
 800124e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001254:	f107 0320 	add.w	r3, r7, #32
 8001258:	4619      	mov	r1, r3
 800125a:	4811      	ldr	r0, [pc, #68]	; (80012a0 <MX_TIM2_Init+0xb0>)
 800125c:	f002 fbaa 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001266:	f7ff fc01 	bl	8000a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800126a:	2370      	movs	r3, #112	; 0x70
 800126c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001276:	2304      	movs	r3, #4
 8001278:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2204      	movs	r2, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <MX_TIM2_Init+0xb0>)
 8001282:	f002 f871 	bl	8003368 <HAL_TIM_PWM_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800128c:	f7ff fbee 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <MX_TIM2_Init+0xb0>)
 8001292:	f000 f8f1 	bl	8001478 <HAL_TIM_MspPostInit>

}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	; 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000164 	.word	0x20000164

080012a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2224      	movs	r2, #36	; 0x24
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fc2a 	bl	8003b0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012c2:	4a21      	ldr	r2, [pc, #132]	; (8001348 <MX_TIM3_Init+0xa4>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ee:	2301      	movs	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 6;
 80012f6:	2306      	movs	r3, #6
 80012f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012fe:	2301      	movs	r3, #1
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 6;
 8001306:	2306      	movs	r3, #6
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_TIM3_Init+0xa0>)
 8001312:	f001 fded 	bl	8002ef0 <HAL_TIM_Encoder_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800131c:	f7ff fba6 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_TIM3_Init+0xa0>)
 800132e:	f002 fb41 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001338:	f7ff fb98 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3730      	adds	r7, #48	; 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200001ac 	.word	0x200001ac
 8001348:	40000400 	.word	0x40000400

0800134c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135c:	d115      	bne.n	800138a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_TIM_PWM_MspInit+0x48>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <HAL_TIM_PWM_MspInit+0x48>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_TIM_PWM_MspInit+0x48>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	201c      	movs	r0, #28
 8001380:	f000 fa4d 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001384:	201c      	movs	r0, #28
 8001386:	f000 fa66 	bl	8001856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a2c      	ldr	r2, [pc, #176]	; (8001468 <HAL_TIM_Encoder_MspInit+0xd0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d151      	bne.n	800145e <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_TIM_Encoder_MspInit+0xd4>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a2a      	ldr	r2, [pc, #168]	; (800146c <HAL_TIM_Encoder_MspInit+0xd4>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <HAL_TIM_Encoder_MspInit+0xd4>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_TIM_Encoder_MspInit+0xd4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <HAL_TIM_Encoder_MspInit+0xd4>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <HAL_TIM_Encoder_MspInit+0xd4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_TIM_Encoder_MspInit+0xd4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a1c      	ldr	r2, [pc, #112]	; (800146c <HAL_TIM_Encoder_MspInit+0xd4>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <HAL_TIM_Encoder_MspInit+0xd4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 800140e:	2340      	movs	r3, #64	; 0x40
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001416:	2301      	movs	r3, #1
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800141e:	2302      	movs	r3, #2
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4811      	ldr	r0, [pc, #68]	; (8001470 <HAL_TIM_Encoder_MspInit+0xd8>)
 800142a:	f000 fa2f 	bl	800188c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 800142e:	2320      	movs	r3, #32
 8001430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001436:	2301      	movs	r3, #1
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800143e:	2302      	movs	r3, #2
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	480a      	ldr	r0, [pc, #40]	; (8001474 <HAL_TIM_Encoder_MspInit+0xdc>)
 800144a:	f000 fa1f 	bl	800188c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	201d      	movs	r0, #29
 8001454:	f000 f9e3 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001458:	201d      	movs	r0, #29
 800145a:	f000 f9fc 	bl	8001856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40000400 	.word	0x40000400
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400

08001478 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001498:	d11d      	bne.n	80014d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_TIM_MspPostInit+0x68>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_TIM_MspPostInit+0x68>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_TIM_MspPostInit+0x68>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BLK_Pin;
 80014b6:	2302      	movs	r3, #2
 80014b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLK_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <HAL_TIM_MspPostInit+0x6c>)
 80014d2:	f000 f9db 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ee:	490e      	ldr	r1, [pc, #56]	; (8001528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f0:	4a0e      	ldr	r2, [pc, #56]	; (800152c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001504:	4c0b      	ldr	r4, [pc, #44]	; (8001534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001512:	f7ff fe5b 	bl	80011cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001516:	f002 fad5 	bl	8003ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff f9ed 	bl	80008f8 <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800152c:	08006d48 	.word	0x08006d48
  ldr r2, =_sbss
 8001530:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001534:	20000208 	.word	0x20000208

08001538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC_IRQHandler>
	...

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_Init+0x40>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_Init+0x40>)
 8001552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_Init+0x40>)
 800155e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f94f 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	200f      	movs	r0, #15
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fd46 	bl	8001000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023c00 	.word	0x40023c00

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f967 	bl	8001872 <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 f92f 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000018 	.word	0x20000018
 80015d8:	20000020 	.word	0x20000020
 80015dc:	2000001c 	.word	0x2000001c

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000020 	.word	0x20000020
 8001604:	200001f4 	.word	0x200001f4

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200001f4 	.word	0x200001f4

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000020 	.word	0x20000020

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff29 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff3e 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff8e 	bl	800175c <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff31 	bl	80016cc <__NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffa2 	bl	80017c4 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e159      	b.n	8001b5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8148 	bne.w	8001b56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d005      	beq.n	80018de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d130      	bne.n	8001940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 0201 	and.w	r2, r3, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b03      	cmp	r3, #3
 800194a:	d017      	beq.n	800197c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80a2 	beq.w	8001b56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a56      	ldr	r2, [pc, #344]	; (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2e:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a49      	ldr	r2, [pc, #292]	; (8001b7c <HAL_GPIO_Init+0x2f0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d019      	beq.n	8001a8e <HAL_GPIO_Init+0x202>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a48      	ldr	r2, [pc, #288]	; (8001b80 <HAL_GPIO_Init+0x2f4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0x1fe>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a47      	ldr	r2, [pc, #284]	; (8001b84 <HAL_GPIO_Init+0x2f8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00d      	beq.n	8001a86 <HAL_GPIO_Init+0x1fa>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a46      	ldr	r2, [pc, #280]	; (8001b88 <HAL_GPIO_Init+0x2fc>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_Init+0x1f6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a45      	ldr	r2, [pc, #276]	; (8001b8c <HAL_GPIO_Init+0x300>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_GPIO_Init+0x1f2>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a7e:	2307      	movs	r3, #7
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f002 0203 	and.w	r2, r2, #3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa0:	4935      	ldr	r1, [pc, #212]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aae:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad2:	4a2f      	ldr	r2, [pc, #188]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001afc:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b26:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b50:	4a0f      	ldr	r2, [pc, #60]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	f67f aea2 	bls.w	80018a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fa8e 	bl	8001108 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40013c00 	.word	0x40013c00

08001bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e12b      	b.n	8001e62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7fe fd52 	bl	80006c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2224      	movs	r2, #36	; 0x24
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c5c:	f000 fd40 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8001c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4a81      	ldr	r2, [pc, #516]	; (8001e6c <HAL_I2C_Init+0x274>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d807      	bhi.n	8001c7c <HAL_I2C_Init+0x84>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4a80      	ldr	r2, [pc, #512]	; (8001e70 <HAL_I2C_Init+0x278>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	bf94      	ite	ls
 8001c74:	2301      	movls	r3, #1
 8001c76:	2300      	movhi	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	e006      	b.n	8001c8a <HAL_I2C_Init+0x92>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4a7d      	ldr	r2, [pc, #500]	; (8001e74 <HAL_I2C_Init+0x27c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	bf94      	ite	ls
 8001c84:	2301      	movls	r3, #1
 8001c86:	2300      	movhi	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0e7      	b.n	8001e62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4a78      	ldr	r2, [pc, #480]	; (8001e78 <HAL_I2C_Init+0x280>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	0c9b      	lsrs	r3, r3, #18
 8001c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a6a      	ldr	r2, [pc, #424]	; (8001e6c <HAL_I2C_Init+0x274>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d802      	bhi.n	8001ccc <HAL_I2C_Init+0xd4>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	e009      	b.n	8001ce0 <HAL_I2C_Init+0xe8>
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cd2:	fb02 f303 	mul.w	r3, r2, r3
 8001cd6:	4a69      	ldr	r2, [pc, #420]	; (8001e7c <HAL_I2C_Init+0x284>)
 8001cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	3301      	adds	r3, #1
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	495c      	ldr	r1, [pc, #368]	; (8001e6c <HAL_I2C_Init+0x274>)
 8001cfc:	428b      	cmp	r3, r1
 8001cfe:	d819      	bhi.n	8001d34 <HAL_I2C_Init+0x13c>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1e59      	subs	r1, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d0e:	1c59      	adds	r1, r3, #1
 8001d10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d14:	400b      	ands	r3, r1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00a      	beq.n	8001d30 <HAL_I2C_Init+0x138>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1e59      	subs	r1, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2e:	e051      	b.n	8001dd4 <HAL_I2C_Init+0x1dc>
 8001d30:	2304      	movs	r3, #4
 8001d32:	e04f      	b.n	8001dd4 <HAL_I2C_Init+0x1dc>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d111      	bne.n	8001d60 <HAL_I2C_Init+0x168>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1e58      	subs	r0, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	440b      	add	r3, r1
 8001d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	e012      	b.n	8001d86 <HAL_I2C_Init+0x18e>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1e58      	subs	r0, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	0099      	lsls	r1, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d76:	3301      	adds	r3, #1
 8001d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_Init+0x196>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e022      	b.n	8001dd4 <HAL_I2C_Init+0x1dc>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10e      	bne.n	8001db4 <HAL_I2C_Init+0x1bc>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1e58      	subs	r0, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6859      	ldr	r1, [r3, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	440b      	add	r3, r1
 8001da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db2:	e00f      	b.n	8001dd4 <HAL_I2C_Init+0x1dc>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1e58      	subs	r0, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6859      	ldr	r1, [r3, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	0099      	lsls	r1, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	6809      	ldr	r1, [r1, #0]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6911      	ldr	r1, [r2, #16]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68d2      	ldr	r2, [r2, #12]
 8001e0e:	4311      	orrs	r1, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	000186a0 	.word	0x000186a0
 8001e70:	001e847f 	.word	0x001e847f
 8001e74:	003d08ff 	.word	0x003d08ff
 8001e78:	431bde83 	.word	0x431bde83
 8001e7c:	10624dd3 	.word	0x10624dd3

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e267      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d075      	beq.n	8001f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e9e:	4b88      	ldr	r3, [pc, #544]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b85      	ldr	r3, [pc, #532]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d112      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb6:	4b82      	ldr	r3, [pc, #520]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	4b7e      	ldr	r3, [pc, #504]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d05b      	beq.n	8001f88 <HAL_RCC_OscConfig+0x108>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d157      	bne.n	8001f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e242      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee4:	d106      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x74>
 8001ee6:	4b76      	ldr	r3, [pc, #472]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a75      	ldr	r2, [pc, #468]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b70      	ldr	r3, [pc, #448]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6f      	ldr	r2, [pc, #444]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b6d      	ldr	r3, [pc, #436]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6c      	ldr	r2, [pc, #432]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001f18:	4b69      	ldr	r3, [pc, #420]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a68      	ldr	r2, [pc, #416]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a65      	ldr	r2, [pc, #404]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fb66 	bl	8001608 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fb62 	bl	8001608 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e207      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xc0>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fb52 	bl	8001608 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fb4e 	bl	8001608 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1f3      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b51      	ldr	r3, [pc, #324]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0xe8>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f96:	4b4a      	ldr	r3, [pc, #296]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b44      	ldr	r3, [pc, #272]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1c7      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4937      	ldr	r1, [pc, #220]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e03a      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCC_OscConfig+0x244>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7ff fb07 	bl	8001608 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7ff fb03 	bl	8001608 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1a8      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4925      	ldr	r1, [pc, #148]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_OscConfig+0x244>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff fae6 	bl	8001608 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff fae2 	bl	8001608 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e187      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d036      	beq.n	80020d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_RCC_OscConfig+0x248>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff fac6 	bl	8001608 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002080:	f7ff fac2 	bl	8001608 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e167      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x200>
 800209e:	e01b      	b.n	80020d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_OscConfig+0x248>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff faaf 	bl	8001608 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	e00e      	b.n	80020cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ae:	f7ff faab 	bl	8001608 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d907      	bls.n	80020cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e150      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	42470000 	.word	0x42470000
 80020c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ea      	bne.n	80020ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8097 	beq.w	8002214 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b81      	ldr	r3, [pc, #516]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10f      	bne.n	8002116 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4b7d      	ldr	r3, [pc, #500]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a7c      	ldr	r2, [pc, #496]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b7a      	ldr	r3, [pc, #488]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b77      	ldr	r3, [pc, #476]	; (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b74      	ldr	r3, [pc, #464]	; (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a73      	ldr	r2, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7ff fa6b 	bl	8001608 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7ff fa67 	bl	8001608 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e10c      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b6a      	ldr	r3, [pc, #424]	; (80022f4 <HAL_RCC_OscConfig+0x474>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x2ea>
 800215c:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a63      	ldr	r2, [pc, #396]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x324>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x30c>
 8002172:	4b5f      	ldr	r3, [pc, #380]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	4a5e      	ldr	r2, [pc, #376]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6713      	str	r3, [r2, #112]	; 0x70
 800217e:	4b5c      	ldr	r3, [pc, #368]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002182:	4a5b      	ldr	r2, [pc, #364]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	; 0x70
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0x324>
 800218c:	4b58      	ldr	r3, [pc, #352]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6713      	str	r3, [r2, #112]	; 0x70
 8002198:	4b55      	ldr	r3, [pc, #340]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	4a54      	ldr	r2, [pc, #336]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800219e:	f023 0304 	bic.w	r3, r3, #4
 80021a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff fa2c 	bl	8001608 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7ff fa28 	bl	8001608 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0cb      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ca:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0ee      	beq.n	80021b4 <HAL_RCC_OscConfig+0x334>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7ff fa16 	bl	8001608 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7ff fa12 	bl	8001608 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0b5      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f6:	4b3e      	ldr	r3, [pc, #248]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ee      	bne.n	80021e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 800220e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002212:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a1 	beq.w	8002360 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221e:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b08      	cmp	r3, #8
 8002228:	d05c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d141      	bne.n	80022b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_RCC_OscConfig+0x478>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff f9e6 	bl	8001608 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff f9e2 	bl	8001608 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e087      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	019b      	lsls	r3, r3, #6
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	041b      	lsls	r3, r3, #16
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	491b      	ldr	r1, [pc, #108]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x478>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7ff f9bb 	bl	8001608 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7ff f9b7 	bl	8001608 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e05c      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x416>
 80022b4:	e054      	b.n	8002360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_RCC_OscConfig+0x478>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff f9a4 	bl	8001608 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7ff f9a0 	bl	8001608 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e045      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x470>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x444>
 80022e2:	e03d      	b.n	8002360 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e038      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x4ec>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d028      	beq.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d121      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d11a      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	4293      	cmp	r3, r2
 8002336:	d111      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	3b01      	subs	r3, #1
 8002346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0cc      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b68      	ldr	r3, [pc, #416]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d90c      	bls.n	80023ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b65      	ldr	r3, [pc, #404]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a52      	ldr	r2, [pc, #328]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d044      	beq.n	8002490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d119      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d003      	beq.n	800242e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242a:	2b03      	cmp	r3, #3
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e06f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e067      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b37      	ldr	r3, [pc, #220]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4934      	ldr	r1, [pc, #208]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7ff f8d2 	bl	8001608 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7ff f8ce 	bl	8001608 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d20c      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f832 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	08006cec 	.word	0x08006cec
 8002534:	20000018 	.word	0x20000018
 8002538:	2000001c 	.word	0x2000001c

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002540:	b090      	sub	sp, #64	; 0x40
 8002542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
 8002548:	2300      	movs	r3, #0
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800254c:	2300      	movs	r3, #0
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002554:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d00d      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x40>
 8002560:	2b08      	cmp	r3, #8
 8002562:	f200 80a1 	bhi.w	80026a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x34>
 800256a:	2b04      	cmp	r3, #4
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x3a>
 800256e:	e09b      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002572:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002574:	e09b      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002576:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002578:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800257a:	e098      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257c:	4b4f      	ldr	r3, [pc, #316]	; (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002586:	4b4d      	ldr	r3, [pc, #308]	; (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d028      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002592:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	2200      	movs	r2, #0
 800259a:	623b      	str	r3, [r7, #32]
 800259c:	627a      	str	r2, [r7, #36]	; 0x24
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025a4:	2100      	movs	r1, #0
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80025a8:	fb03 f201 	mul.w	r2, r3, r1
 80025ac:	2300      	movs	r3, #0
 80025ae:	fb00 f303 	mul.w	r3, r0, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	4a43      	ldr	r2, [pc, #268]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80025b6:	fba0 1202 	umull	r1, r2, r0, r2
 80025ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025bc:	460a      	mov	r2, r1
 80025be:	62ba      	str	r2, [r7, #40]	; 0x28
 80025c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c2:	4413      	add	r3, r2
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c8:	2200      	movs	r2, #0
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	61fa      	str	r2, [r7, #28]
 80025ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025d6:	f7fd fe53 	bl	8000280 <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4613      	mov	r3, r2
 80025e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e2:	e053      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e4:	4b35      	ldr	r3, [pc, #212]	; (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	2200      	movs	r2, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	617a      	str	r2, [r7, #20]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025f6:	f04f 0b00 	mov.w	fp, #0
 80025fa:	4652      	mov	r2, sl
 80025fc:	465b      	mov	r3, fp
 80025fe:	f04f 0000 	mov.w	r0, #0
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	0159      	lsls	r1, r3, #5
 8002608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800260c:	0150      	lsls	r0, r2, #5
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	ebb2 080a 	subs.w	r8, r2, sl
 8002616:	eb63 090b 	sbc.w	r9, r3, fp
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002626:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800262a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800262e:	ebb2 0408 	subs.w	r4, r2, r8
 8002632:	eb63 0509 	sbc.w	r5, r3, r9
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	00eb      	lsls	r3, r5, #3
 8002640:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002644:	00e2      	lsls	r2, r4, #3
 8002646:	4614      	mov	r4, r2
 8002648:	461d      	mov	r5, r3
 800264a:	eb14 030a 	adds.w	r3, r4, sl
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	eb45 030b 	adc.w	r3, r5, fp
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002662:	4629      	mov	r1, r5
 8002664:	028b      	lsls	r3, r1, #10
 8002666:	4621      	mov	r1, r4
 8002668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800266c:	4621      	mov	r1, r4
 800266e:	028a      	lsls	r2, r1, #10
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	2200      	movs	r2, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	60fa      	str	r2, [r7, #12]
 800267c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002680:	f7fd fdfe 	bl	8000280 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_GetSysClockFreq+0x180>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	3301      	adds	r3, #1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800269c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026a6:	e002      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80026aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3740      	adds	r7, #64	; 0x40
 80026b4:	46bd      	mov	sp, r7
 80026b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	00f42400 	.word	0x00f42400
 80026c4:	017d7840 	.word	0x017d7840

080026c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000018 	.word	0x20000018

080026e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026e4:	f7ff fff0 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0a9b      	lsrs	r3, r3, #10
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4903      	ldr	r1, [pc, #12]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40023800 	.word	0x40023800
 8002704:	08006cfc 	.word	0x08006cfc

08002708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e07b      	b.n	8002812 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	2b00      	cmp	r3, #0
 8002720:	d108      	bne.n	8002734 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800272a:	d009      	beq.n	8002740 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
 8002732:	e005      	b.n	8002740 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe f9c2 	bl	8000ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002776:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c4:	ea42 0103 	orr.w	r1, r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	0c1b      	lsrs	r3, r3, #16
 80027de:	f003 0104 	and.w	r1, r3, #4
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	f003 0210 	and.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002800:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b088      	sub	sp, #32
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_SPI_Transmit+0x22>
 8002838:	2302      	movs	r3, #2
 800283a:	e126      	b.n	8002a8a <HAL_SPI_Transmit+0x270>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002844:	f7fe fee0 	bl	8001608 <HAL_GetTick>
 8002848:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d002      	beq.n	8002860 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800285a:	2302      	movs	r3, #2
 800285c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800285e:	e10b      	b.n	8002a78 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_SPI_Transmit+0x52>
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002870:	e102      	b.n	8002a78 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2203      	movs	r2, #3
 8002876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b8:	d10f      	bne.n	80028da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e4:	2b40      	cmp	r3, #64	; 0x40
 80028e6:	d007      	beq.n	80028f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002900:	d14b      	bne.n	800299a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_SPI_Transmit+0xf6>
 800290a:	8afb      	ldrh	r3, [r7, #22]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d13e      	bne.n	800298e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	881a      	ldrh	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	1c9a      	adds	r2, r3, #2
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002934:	e02b      	b.n	800298e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b02      	cmp	r3, #2
 8002942:	d112      	bne.n	800296a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	881a      	ldrh	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	1c9a      	adds	r2, r3, #2
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	86da      	strh	r2, [r3, #54]	; 0x36
 8002968:	e011      	b.n	800298e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800296a:	f7fe fe4d 	bl	8001608 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d803      	bhi.n	8002982 <HAL_SPI_Transmit+0x168>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d102      	bne.n	8002988 <HAL_SPI_Transmit+0x16e>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800298c:	e074      	b.n	8002a78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ce      	bne.n	8002936 <HAL_SPI_Transmit+0x11c>
 8002998:	e04c      	b.n	8002a34 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_SPI_Transmit+0x18e>
 80029a2:	8afb      	ldrh	r3, [r7, #22]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d140      	bne.n	8002a2a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	7812      	ldrb	r2, [r2, #0]
 80029b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029ce:	e02c      	b.n	8002a2a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d113      	bne.n	8002a06 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	330c      	adds	r3, #12
 80029e8:	7812      	ldrb	r2, [r2, #0]
 80029ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a04:	e011      	b.n	8002a2a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a06:	f7fe fdff 	bl	8001608 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d803      	bhi.n	8002a1e <HAL_SPI_Transmit+0x204>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d102      	bne.n	8002a24 <HAL_SPI_Transmit+0x20a>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a28:	e026      	b.n	8002a78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1cd      	bne.n	80029d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	6839      	ldr	r1, [r7, #0]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f8b3 	bl	8002ba4 <SPI_EndRxTxTransaction>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10a      	bne.n	8002a68 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	77fb      	strb	r3, [r7, #31]
 8002a74:	e000      	b.n	8002a78 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a88:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002aa4:	f7fe fdb0 	bl	8001608 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ab4:	f7fe fda8 	bl	8001608 <HAL_GetTick>
 8002ab8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002aba:	4b39      	ldr	r3, [pc, #228]	; (8002ba0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	015b      	lsls	r3, r3, #5
 8002ac0:	0d1b      	lsrs	r3, r3, #20
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aca:	e054      	b.n	8002b76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad2:	d050      	beq.n	8002b76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ad4:	f7fe fd98 	bl	8001608 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d902      	bls.n	8002aea <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d13d      	bne.n	8002b66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002af8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b02:	d111      	bne.n	8002b28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0c:	d004      	beq.n	8002b18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b16:	d107      	bne.n	8002b28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b30:	d10f      	bne.n	8002b52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e017      	b.n	8002b96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	bf0c      	ite	eq
 8002b86:	2301      	moveq	r3, #1
 8002b88:	2300      	movne	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d19b      	bne.n	8002acc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000018 	.word	0x20000018

08002ba4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <SPI_EndRxTxTransaction+0x7c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <SPI_EndRxTxTransaction+0x80>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0d5b      	lsrs	r3, r3, #21
 8002bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bce:	d112      	bne.n	8002bf6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2180      	movs	r1, #128	; 0x80
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7ff ff5a 	bl	8002a94 <SPI_WaitFlagStateUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	f043 0220 	orr.w	r2, r3, #32
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e00f      	b.n	8002c16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	2b80      	cmp	r3, #128	; 0x80
 8002c0e:	d0f2      	beq.n	8002bf6 <SPI_EndRxTxTransaction+0x52>
 8002c10:	e000      	b.n	8002c14 <SPI_EndRxTxTransaction+0x70>
        break;
 8002c12:	bf00      	nop
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000018 	.word	0x20000018
 8002c24:	165e9f81 	.word	0x165e9f81

08002c28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e041      	b.n	8002cbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fe fb7c 	bl	800134c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3304      	adds	r3, #4
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f000 fc72 	bl	8003550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d109      	bne.n	8002cec <HAL_TIM_PWM_Start+0x24>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	e022      	b.n	8002d32 <HAL_TIM_PWM_Start+0x6a>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d109      	bne.n	8002d06 <HAL_TIM_PWM_Start+0x3e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	e015      	b.n	8002d32 <HAL_TIM_PWM_Start+0x6a>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d109      	bne.n	8002d20 <HAL_TIM_PWM_Start+0x58>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	bf14      	ite	ne
 8002d18:	2301      	movne	r3, #1
 8002d1a:	2300      	moveq	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e008      	b.n	8002d32 <HAL_TIM_PWM_Start+0x6a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e068      	b.n	8002e0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_PWM_Start+0x82>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d48:	e013      	b.n	8002d72 <HAL_TIM_PWM_Start+0xaa>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_PWM_Start+0x92>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	e00b      	b.n	8002d72 <HAL_TIM_PWM_Start+0xaa>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_PWM_Start+0xa2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	e003      	b.n	8002d72 <HAL_TIM_PWM_Start+0xaa>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	6839      	ldr	r1, [r7, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fdf4 	bl	8003968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a23      	ldr	r2, [pc, #140]	; (8002e14 <HAL_TIM_PWM_Start+0x14c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d107      	bne.n	8002d9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <HAL_TIM_PWM_Start+0x14c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d018      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x10e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dac:	d013      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x10e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <HAL_TIM_PWM_Start+0x150>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00e      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x10e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <HAL_TIM_PWM_Start+0x154>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x10e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a16      	ldr	r2, [pc, #88]	; (8002e20 <HAL_TIM_PWM_Start+0x158>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x10e>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <HAL_TIM_PWM_Start+0x15c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d111      	bne.n	8002dfa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d010      	beq.n	8002e0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df8:	e007      	b.n	8002e0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40010000 	.word	0x40010000
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40000c00 	.word	0x40000c00
 8002e24:	40014000 	.word	0x40014000

08002e28 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	6839      	ldr	r1, [r7, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fd94 	bl	8003968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a29      	ldr	r2, [pc, #164]	; (8002eec <HAL_TIM_PWM_Stop+0xc4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d117      	bne.n	8002e7a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a1a      	ldr	r2, [r3, #32]
 8002e50:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10f      	bne.n	8002e7a <HAL_TIM_PWM_Stop+0x52>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	f240 4344 	movw	r3, #1092	; 0x444
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d107      	bne.n	8002e7a <HAL_TIM_PWM_Stop+0x52>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a1a      	ldr	r2, [r3, #32]
 8002e80:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10f      	bne.n	8002eaa <HAL_TIM_PWM_Stop+0x82>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a1a      	ldr	r2, [r3, #32]
 8002e90:	f240 4344 	movw	r3, #1092	; 0x444
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d107      	bne.n	8002eaa <HAL_TIM_PWM_Stop+0x82>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_PWM_Stop+0x92>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb8:	e013      	b.n	8002ee2 <HAL_TIM_PWM_Stop+0xba>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_PWM_Stop+0xa2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec8:	e00b      	b.n	8002ee2 <HAL_TIM_PWM_Stop+0xba>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Stop+0xb2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed8:	e003      	b.n	8002ee2 <HAL_TIM_PWM_Stop+0xba>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40010000 	.word	0x40010000

08002ef0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e097      	b.n	8003034 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7fe fa3d 	bl	8001398 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2202      	movs	r2, #2
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f34:	f023 0307 	bic.w	r3, r3, #7
 8002f38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	4619      	mov	r1, r3
 8002f44:	4610      	mov	r0, r2
 8002f46:	f000 fb03 	bl	8003550 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	4313      	orrs	r3, r2
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f90:	f023 030c 	bic.w	r3, r3, #12
 8002f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	4313      	orrs	r3, r2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	011a      	lsls	r2, r3, #4
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	031b      	lsls	r3, r3, #12
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002fd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003054:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800305c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003064:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d110      	bne.n	800308e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d102      	bne.n	8003078 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003072:	7b7b      	ldrb	r3, [r7, #13]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d001      	beq.n	800307c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e069      	b.n	8003150 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800308c:	e031      	b.n	80030f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d110      	bne.n	80030b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003094:	7bbb      	ldrb	r3, [r7, #14]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d102      	bne.n	80030a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800309a:	7b3b      	ldrb	r3, [r7, #12]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e055      	b.n	8003150 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030b4:	e01d      	b.n	80030f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d108      	bne.n	80030ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030bc:	7bbb      	ldrb	r3, [r7, #14]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d105      	bne.n	80030ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030c2:	7b7b      	ldrb	r3, [r7, #13]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d102      	bne.n	80030ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030c8:	7b3b      	ldrb	r3, [r7, #12]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d001      	beq.n	80030d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e03e      	b.n	8003150 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_TIM_Encoder_Start+0xc4>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d008      	beq.n	8003110 <HAL_TIM_Encoder_Start+0xd4>
 80030fe:	e00f      	b.n	8003120 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fc2d 	bl	8003968 <TIM_CCxChannelCmd>
      break;
 800310e:	e016      	b.n	800313e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2201      	movs	r2, #1
 8003116:	2104      	movs	r1, #4
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fc25 	bl	8003968 <TIM_CCxChannelCmd>
      break;
 800311e:	e00e      	b.n	800313e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2201      	movs	r2, #1
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fc1d 	bl	8003968 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2201      	movs	r2, #1
 8003134:	2104      	movs	r1, #4
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fc16 	bl	8003968 <TIM_CCxChannelCmd>
      break;
 800313c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0202 	mvn.w	r2, #2
 8003184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f9ba 	bl	8003514 <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f9ac 	bl	8003500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f9bd 	bl	8003528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0204 	mvn.w	r2, #4
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f990 	bl	8003514 <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f982 	bl	8003500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f993 	bl	8003528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b08      	cmp	r3, #8
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b08      	cmp	r3, #8
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0208 	mvn.w	r2, #8
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2204      	movs	r2, #4
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f966 	bl	8003514 <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f958 	bl	8003500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f969 	bl	8003528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b10      	cmp	r3, #16
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b10      	cmp	r3, #16
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0210 	mvn.w	r2, #16
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2208      	movs	r2, #8
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f93c 	bl	8003514 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f92e 	bl	8003500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f93f 	bl	8003528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d10e      	bne.n	80032dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d107      	bne.n	80032dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0201 	mvn.w	r2, #1
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f908 	bl	80034ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b80      	cmp	r3, #128	; 0x80
 80032e8:	d10e      	bne.n	8003308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d107      	bne.n	8003308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fbce 	bl	8003aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b40      	cmp	r3, #64	; 0x40
 8003314:	d10e      	bne.n	8003334 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d107      	bne.n	8003334 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800332c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f904 	bl	800353c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b20      	cmp	r3, #32
 8003340:	d10e      	bne.n	8003360 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b20      	cmp	r3, #32
 800334e:	d107      	bne.n	8003360 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0220 	mvn.w	r2, #32
 8003358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fb98 	bl	8003a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003382:	2302      	movs	r3, #2
 8003384:	e0ae      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b0c      	cmp	r3, #12
 8003392:	f200 809f 	bhi.w	80034d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003396:	a201      	add	r2, pc, #4	; (adr r2, 800339c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	080033d1 	.word	0x080033d1
 80033a0:	080034d5 	.word	0x080034d5
 80033a4:	080034d5 	.word	0x080034d5
 80033a8:	080034d5 	.word	0x080034d5
 80033ac:	08003411 	.word	0x08003411
 80033b0:	080034d5 	.word	0x080034d5
 80033b4:	080034d5 	.word	0x080034d5
 80033b8:	080034d5 	.word	0x080034d5
 80033bc:	08003453 	.word	0x08003453
 80033c0:	080034d5 	.word	0x080034d5
 80033c4:	080034d5 	.word	0x080034d5
 80033c8:	080034d5 	.word	0x080034d5
 80033cc:	08003493 	.word	0x08003493
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f93a 	bl	8003650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0208 	orr.w	r2, r2, #8
 80033ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0204 	bic.w	r2, r2, #4
 80033fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6999      	ldr	r1, [r3, #24]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	619a      	str	r2, [r3, #24]
      break;
 800340e:	e064      	b.n	80034da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f980 	bl	800371c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800342a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6999      	ldr	r1, [r3, #24]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	021a      	lsls	r2, r3, #8
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	619a      	str	r2, [r3, #24]
      break;
 8003450:	e043      	b.n	80034da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f9cb 	bl	80037f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 0208 	orr.w	r2, r2, #8
 800346c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0204 	bic.w	r2, r2, #4
 800347c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69d9      	ldr	r1, [r3, #28]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	61da      	str	r2, [r3, #28]
      break;
 8003490:	e023      	b.n	80034da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fa15 	bl	80038c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69da      	ldr	r2, [r3, #28]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69d9      	ldr	r1, [r3, #28]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	021a      	lsls	r2, r3, #8
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	61da      	str	r2, [r3, #28]
      break;
 80034d2:	e002      	b.n	80034da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	75fb      	strb	r3, [r7, #23]
      break;
 80034d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a34      	ldr	r2, [pc, #208]	; (8003634 <TIM_Base_SetConfig+0xe4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00f      	beq.n	8003588 <TIM_Base_SetConfig+0x38>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356e:	d00b      	beq.n	8003588 <TIM_Base_SetConfig+0x38>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a31      	ldr	r2, [pc, #196]	; (8003638 <TIM_Base_SetConfig+0xe8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d007      	beq.n	8003588 <TIM_Base_SetConfig+0x38>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a30      	ldr	r2, [pc, #192]	; (800363c <TIM_Base_SetConfig+0xec>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d003      	beq.n	8003588 <TIM_Base_SetConfig+0x38>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a2f      	ldr	r2, [pc, #188]	; (8003640 <TIM_Base_SetConfig+0xf0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d108      	bne.n	800359a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a25      	ldr	r2, [pc, #148]	; (8003634 <TIM_Base_SetConfig+0xe4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01b      	beq.n	80035da <TIM_Base_SetConfig+0x8a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a8:	d017      	beq.n	80035da <TIM_Base_SetConfig+0x8a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a22      	ldr	r2, [pc, #136]	; (8003638 <TIM_Base_SetConfig+0xe8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <TIM_Base_SetConfig+0x8a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a21      	ldr	r2, [pc, #132]	; (800363c <TIM_Base_SetConfig+0xec>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00f      	beq.n	80035da <TIM_Base_SetConfig+0x8a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a20      	ldr	r2, [pc, #128]	; (8003640 <TIM_Base_SetConfig+0xf0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00b      	beq.n	80035da <TIM_Base_SetConfig+0x8a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1f      	ldr	r2, [pc, #124]	; (8003644 <TIM_Base_SetConfig+0xf4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d007      	beq.n	80035da <TIM_Base_SetConfig+0x8a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <TIM_Base_SetConfig+0xf8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d003      	beq.n	80035da <TIM_Base_SetConfig+0x8a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a1d      	ldr	r2, [pc, #116]	; (800364c <TIM_Base_SetConfig+0xfc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d108      	bne.n	80035ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a08      	ldr	r2, [pc, #32]	; (8003634 <TIM_Base_SetConfig+0xe4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d103      	bne.n	8003620 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	615a      	str	r2, [r3, #20]
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40010000 	.word	0x40010000
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800
 8003640:	40000c00 	.word	0x40000c00
 8003644:	40014000 	.word	0x40014000
 8003648:	40014400 	.word	0x40014400
 800364c:	40014800 	.word	0x40014800

08003650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f023 0201 	bic.w	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0303 	bic.w	r3, r3, #3
 8003686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f023 0302 	bic.w	r3, r3, #2
 8003698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <TIM_OC1_SetConfig+0xc8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d10c      	bne.n	80036c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0308 	bic.w	r3, r3, #8
 80036b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f023 0304 	bic.w	r3, r3, #4
 80036c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a13      	ldr	r2, [pc, #76]	; (8003718 <TIM_OC1_SetConfig+0xc8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d111      	bne.n	80036f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	621a      	str	r2, [r3, #32]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40010000 	.word	0x40010000

0800371c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f023 0210 	bic.w	r2, r3, #16
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0320 	bic.w	r3, r3, #32
 8003766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <TIM_OC2_SetConfig+0xd4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d10d      	bne.n	8003798 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003796:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <TIM_OC2_SetConfig+0xd4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d113      	bne.n	80037c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	621a      	str	r2, [r3, #32]
}
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000

080037f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800383c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a1d      	ldr	r2, [pc, #116]	; (80038c4 <TIM_OC3_SetConfig+0xd0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d10d      	bne.n	800386e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800386c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <TIM_OC3_SetConfig+0xd0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d113      	bne.n	800389e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800387c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	621a      	str	r2, [r3, #32]
}
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40010000 	.word	0x40010000

080038c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	031b      	lsls	r3, r3, #12
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a10      	ldr	r2, [pc, #64]	; (8003964 <TIM_OC4_SetConfig+0x9c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d109      	bne.n	800393c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800392e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40010000 	.word	0x40010000

08003968 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2201      	movs	r2, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	43db      	mvns	r3, r3
 800398a:	401a      	ands	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1a      	ldr	r2, [r3, #32]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	431a      	orrs	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e050      	b.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d018      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a18:	d013      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d10c      	bne.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40014000 	.word	0x40014000

08003a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <__errno>:
 8003ab8:	4b01      	ldr	r3, [pc, #4]	; (8003ac0 <__errno+0x8>)
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000024 	.word	0x20000024

08003ac4 <__libc_init_array>:
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	4d0d      	ldr	r5, [pc, #52]	; (8003afc <__libc_init_array+0x38>)
 8003ac8:	4c0d      	ldr	r4, [pc, #52]	; (8003b00 <__libc_init_array+0x3c>)
 8003aca:	1b64      	subs	r4, r4, r5
 8003acc:	10a4      	asrs	r4, r4, #2
 8003ace:	2600      	movs	r6, #0
 8003ad0:	42a6      	cmp	r6, r4
 8003ad2:	d109      	bne.n	8003ae8 <__libc_init_array+0x24>
 8003ad4:	4d0b      	ldr	r5, [pc, #44]	; (8003b04 <__libc_init_array+0x40>)
 8003ad6:	4c0c      	ldr	r4, [pc, #48]	; (8003b08 <__libc_init_array+0x44>)
 8003ad8:	f000 fca2 	bl	8004420 <_init>
 8003adc:	1b64      	subs	r4, r4, r5
 8003ade:	10a4      	asrs	r4, r4, #2
 8003ae0:	2600      	movs	r6, #0
 8003ae2:	42a6      	cmp	r6, r4
 8003ae4:	d105      	bne.n	8003af2 <__libc_init_array+0x2e>
 8003ae6:	bd70      	pop	{r4, r5, r6, pc}
 8003ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aec:	4798      	blx	r3
 8003aee:	3601      	adds	r6, #1
 8003af0:	e7ee      	b.n	8003ad0 <__libc_init_array+0xc>
 8003af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af6:	4798      	blx	r3
 8003af8:	3601      	adds	r6, #1
 8003afa:	e7f2      	b.n	8003ae2 <__libc_init_array+0x1e>
 8003afc:	08006d40 	.word	0x08006d40
 8003b00:	08006d40 	.word	0x08006d40
 8003b04:	08006d40 	.word	0x08006d40
 8003b08:	08006d44 	.word	0x08006d44

08003b0c <memset>:
 8003b0c:	4402      	add	r2, r0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d100      	bne.n	8003b16 <memset+0xa>
 8003b14:	4770      	bx	lr
 8003b16:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1a:	e7f9      	b.n	8003b10 <memset+0x4>

08003b1c <_free_r>:
 8003b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b1e:	2900      	cmp	r1, #0
 8003b20:	d044      	beq.n	8003bac <_free_r+0x90>
 8003b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b26:	9001      	str	r0, [sp, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b2e:	bfb8      	it	lt
 8003b30:	18e4      	addlt	r4, r4, r3
 8003b32:	f000 f917 	bl	8003d64 <__malloc_lock>
 8003b36:	4a1e      	ldr	r2, [pc, #120]	; (8003bb0 <_free_r+0x94>)
 8003b38:	9801      	ldr	r0, [sp, #4]
 8003b3a:	6813      	ldr	r3, [r2, #0]
 8003b3c:	b933      	cbnz	r3, 8003b4c <_free_r+0x30>
 8003b3e:	6063      	str	r3, [r4, #4]
 8003b40:	6014      	str	r4, [r2, #0]
 8003b42:	b003      	add	sp, #12
 8003b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b48:	f000 b912 	b.w	8003d70 <__malloc_unlock>
 8003b4c:	42a3      	cmp	r3, r4
 8003b4e:	d908      	bls.n	8003b62 <_free_r+0x46>
 8003b50:	6825      	ldr	r5, [r4, #0]
 8003b52:	1961      	adds	r1, r4, r5
 8003b54:	428b      	cmp	r3, r1
 8003b56:	bf01      	itttt	eq
 8003b58:	6819      	ldreq	r1, [r3, #0]
 8003b5a:	685b      	ldreq	r3, [r3, #4]
 8003b5c:	1949      	addeq	r1, r1, r5
 8003b5e:	6021      	streq	r1, [r4, #0]
 8003b60:	e7ed      	b.n	8003b3e <_free_r+0x22>
 8003b62:	461a      	mov	r2, r3
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	b10b      	cbz	r3, 8003b6c <_free_r+0x50>
 8003b68:	42a3      	cmp	r3, r4
 8003b6a:	d9fa      	bls.n	8003b62 <_free_r+0x46>
 8003b6c:	6811      	ldr	r1, [r2, #0]
 8003b6e:	1855      	adds	r5, r2, r1
 8003b70:	42a5      	cmp	r5, r4
 8003b72:	d10b      	bne.n	8003b8c <_free_r+0x70>
 8003b74:	6824      	ldr	r4, [r4, #0]
 8003b76:	4421      	add	r1, r4
 8003b78:	1854      	adds	r4, r2, r1
 8003b7a:	42a3      	cmp	r3, r4
 8003b7c:	6011      	str	r1, [r2, #0]
 8003b7e:	d1e0      	bne.n	8003b42 <_free_r+0x26>
 8003b80:	681c      	ldr	r4, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	6053      	str	r3, [r2, #4]
 8003b86:	4421      	add	r1, r4
 8003b88:	6011      	str	r1, [r2, #0]
 8003b8a:	e7da      	b.n	8003b42 <_free_r+0x26>
 8003b8c:	d902      	bls.n	8003b94 <_free_r+0x78>
 8003b8e:	230c      	movs	r3, #12
 8003b90:	6003      	str	r3, [r0, #0]
 8003b92:	e7d6      	b.n	8003b42 <_free_r+0x26>
 8003b94:	6825      	ldr	r5, [r4, #0]
 8003b96:	1961      	adds	r1, r4, r5
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	bf04      	itt	eq
 8003b9c:	6819      	ldreq	r1, [r3, #0]
 8003b9e:	685b      	ldreq	r3, [r3, #4]
 8003ba0:	6063      	str	r3, [r4, #4]
 8003ba2:	bf04      	itt	eq
 8003ba4:	1949      	addeq	r1, r1, r5
 8003ba6:	6021      	streq	r1, [r4, #0]
 8003ba8:	6054      	str	r4, [r2, #4]
 8003baa:	e7ca      	b.n	8003b42 <_free_r+0x26>
 8003bac:	b003      	add	sp, #12
 8003bae:	bd30      	pop	{r4, r5, pc}
 8003bb0:	200001f8 	.word	0x200001f8

08003bb4 <sbrk_aligned>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	4e0e      	ldr	r6, [pc, #56]	; (8003bf0 <sbrk_aligned+0x3c>)
 8003bb8:	460c      	mov	r4, r1
 8003bba:	6831      	ldr	r1, [r6, #0]
 8003bbc:	4605      	mov	r5, r0
 8003bbe:	b911      	cbnz	r1, 8003bc6 <sbrk_aligned+0x12>
 8003bc0:	f000 f88c 	bl	8003cdc <_sbrk_r>
 8003bc4:	6030      	str	r0, [r6, #0]
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f000 f887 	bl	8003cdc <_sbrk_r>
 8003bce:	1c43      	adds	r3, r0, #1
 8003bd0:	d00a      	beq.n	8003be8 <sbrk_aligned+0x34>
 8003bd2:	1cc4      	adds	r4, r0, #3
 8003bd4:	f024 0403 	bic.w	r4, r4, #3
 8003bd8:	42a0      	cmp	r0, r4
 8003bda:	d007      	beq.n	8003bec <sbrk_aligned+0x38>
 8003bdc:	1a21      	subs	r1, r4, r0
 8003bde:	4628      	mov	r0, r5
 8003be0:	f000 f87c 	bl	8003cdc <_sbrk_r>
 8003be4:	3001      	adds	r0, #1
 8003be6:	d101      	bne.n	8003bec <sbrk_aligned+0x38>
 8003be8:	f04f 34ff 	mov.w	r4, #4294967295
 8003bec:	4620      	mov	r0, r4
 8003bee:	bd70      	pop	{r4, r5, r6, pc}
 8003bf0:	200001fc 	.word	0x200001fc

08003bf4 <_malloc_r>:
 8003bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf8:	1ccd      	adds	r5, r1, #3
 8003bfa:	f025 0503 	bic.w	r5, r5, #3
 8003bfe:	3508      	adds	r5, #8
 8003c00:	2d0c      	cmp	r5, #12
 8003c02:	bf38      	it	cc
 8003c04:	250c      	movcc	r5, #12
 8003c06:	2d00      	cmp	r5, #0
 8003c08:	4607      	mov	r7, r0
 8003c0a:	db01      	blt.n	8003c10 <_malloc_r+0x1c>
 8003c0c:	42a9      	cmp	r1, r5
 8003c0e:	d905      	bls.n	8003c1c <_malloc_r+0x28>
 8003c10:	230c      	movs	r3, #12
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	2600      	movs	r6, #0
 8003c16:	4630      	mov	r0, r6
 8003c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c1c:	4e2e      	ldr	r6, [pc, #184]	; (8003cd8 <_malloc_r+0xe4>)
 8003c1e:	f000 f8a1 	bl	8003d64 <__malloc_lock>
 8003c22:	6833      	ldr	r3, [r6, #0]
 8003c24:	461c      	mov	r4, r3
 8003c26:	bb34      	cbnz	r4, 8003c76 <_malloc_r+0x82>
 8003c28:	4629      	mov	r1, r5
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	f7ff ffc2 	bl	8003bb4 <sbrk_aligned>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	4604      	mov	r4, r0
 8003c34:	d14d      	bne.n	8003cd2 <_malloc_r+0xde>
 8003c36:	6834      	ldr	r4, [r6, #0]
 8003c38:	4626      	mov	r6, r4
 8003c3a:	2e00      	cmp	r6, #0
 8003c3c:	d140      	bne.n	8003cc0 <_malloc_r+0xcc>
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	4631      	mov	r1, r6
 8003c42:	4638      	mov	r0, r7
 8003c44:	eb04 0803 	add.w	r8, r4, r3
 8003c48:	f000 f848 	bl	8003cdc <_sbrk_r>
 8003c4c:	4580      	cmp	r8, r0
 8003c4e:	d13a      	bne.n	8003cc6 <_malloc_r+0xd2>
 8003c50:	6821      	ldr	r1, [r4, #0]
 8003c52:	3503      	adds	r5, #3
 8003c54:	1a6d      	subs	r5, r5, r1
 8003c56:	f025 0503 	bic.w	r5, r5, #3
 8003c5a:	3508      	adds	r5, #8
 8003c5c:	2d0c      	cmp	r5, #12
 8003c5e:	bf38      	it	cc
 8003c60:	250c      	movcc	r5, #12
 8003c62:	4629      	mov	r1, r5
 8003c64:	4638      	mov	r0, r7
 8003c66:	f7ff ffa5 	bl	8003bb4 <sbrk_aligned>
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d02b      	beq.n	8003cc6 <_malloc_r+0xd2>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	442b      	add	r3, r5
 8003c72:	6023      	str	r3, [r4, #0]
 8003c74:	e00e      	b.n	8003c94 <_malloc_r+0xa0>
 8003c76:	6822      	ldr	r2, [r4, #0]
 8003c78:	1b52      	subs	r2, r2, r5
 8003c7a:	d41e      	bmi.n	8003cba <_malloc_r+0xc6>
 8003c7c:	2a0b      	cmp	r2, #11
 8003c7e:	d916      	bls.n	8003cae <_malloc_r+0xba>
 8003c80:	1961      	adds	r1, r4, r5
 8003c82:	42a3      	cmp	r3, r4
 8003c84:	6025      	str	r5, [r4, #0]
 8003c86:	bf18      	it	ne
 8003c88:	6059      	strne	r1, [r3, #4]
 8003c8a:	6863      	ldr	r3, [r4, #4]
 8003c8c:	bf08      	it	eq
 8003c8e:	6031      	streq	r1, [r6, #0]
 8003c90:	5162      	str	r2, [r4, r5]
 8003c92:	604b      	str	r3, [r1, #4]
 8003c94:	4638      	mov	r0, r7
 8003c96:	f104 060b 	add.w	r6, r4, #11
 8003c9a:	f000 f869 	bl	8003d70 <__malloc_unlock>
 8003c9e:	f026 0607 	bic.w	r6, r6, #7
 8003ca2:	1d23      	adds	r3, r4, #4
 8003ca4:	1af2      	subs	r2, r6, r3
 8003ca6:	d0b6      	beq.n	8003c16 <_malloc_r+0x22>
 8003ca8:	1b9b      	subs	r3, r3, r6
 8003caa:	50a3      	str	r3, [r4, r2]
 8003cac:	e7b3      	b.n	8003c16 <_malloc_r+0x22>
 8003cae:	6862      	ldr	r2, [r4, #4]
 8003cb0:	42a3      	cmp	r3, r4
 8003cb2:	bf0c      	ite	eq
 8003cb4:	6032      	streq	r2, [r6, #0]
 8003cb6:	605a      	strne	r2, [r3, #4]
 8003cb8:	e7ec      	b.n	8003c94 <_malloc_r+0xa0>
 8003cba:	4623      	mov	r3, r4
 8003cbc:	6864      	ldr	r4, [r4, #4]
 8003cbe:	e7b2      	b.n	8003c26 <_malloc_r+0x32>
 8003cc0:	4634      	mov	r4, r6
 8003cc2:	6876      	ldr	r6, [r6, #4]
 8003cc4:	e7b9      	b.n	8003c3a <_malloc_r+0x46>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	4638      	mov	r0, r7
 8003ccc:	f000 f850 	bl	8003d70 <__malloc_unlock>
 8003cd0:	e7a1      	b.n	8003c16 <_malloc_r+0x22>
 8003cd2:	6025      	str	r5, [r4, #0]
 8003cd4:	e7de      	b.n	8003c94 <_malloc_r+0xa0>
 8003cd6:	bf00      	nop
 8003cd8:	200001f8 	.word	0x200001f8

08003cdc <_sbrk_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4d06      	ldr	r5, [pc, #24]	; (8003cf8 <_sbrk_r+0x1c>)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	602b      	str	r3, [r5, #0]
 8003ce8:	f7fd fa3a 	bl	8001160 <_sbrk>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_sbrk_r+0x1a>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_sbrk_r+0x1a>
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	20000200 	.word	0x20000200

08003cfc <sniprintf>:
 8003cfc:	b40c      	push	{r2, r3}
 8003cfe:	b530      	push	{r4, r5, lr}
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <sniprintf+0x64>)
 8003d02:	1e0c      	subs	r4, r1, #0
 8003d04:	681d      	ldr	r5, [r3, #0]
 8003d06:	b09d      	sub	sp, #116	; 0x74
 8003d08:	da08      	bge.n	8003d1c <sniprintf+0x20>
 8003d0a:	238b      	movs	r3, #139	; 0x8b
 8003d0c:	602b      	str	r3, [r5, #0]
 8003d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d12:	b01d      	add	sp, #116	; 0x74
 8003d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d18:	b002      	add	sp, #8
 8003d1a:	4770      	bx	lr
 8003d1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003d20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003d24:	bf14      	ite	ne
 8003d26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d2a:	4623      	moveq	r3, r4
 8003d2c:	9304      	str	r3, [sp, #16]
 8003d2e:	9307      	str	r3, [sp, #28]
 8003d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d34:	9002      	str	r0, [sp, #8]
 8003d36:	9006      	str	r0, [sp, #24]
 8003d38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003d3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d3e:	ab21      	add	r3, sp, #132	; 0x84
 8003d40:	a902      	add	r1, sp, #8
 8003d42:	4628      	mov	r0, r5
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	f000 f875 	bl	8003e34 <_svfiprintf_r>
 8003d4a:	1c43      	adds	r3, r0, #1
 8003d4c:	bfbc      	itt	lt
 8003d4e:	238b      	movlt	r3, #139	; 0x8b
 8003d50:	602b      	strlt	r3, [r5, #0]
 8003d52:	2c00      	cmp	r4, #0
 8003d54:	d0dd      	beq.n	8003d12 <sniprintf+0x16>
 8003d56:	9b02      	ldr	r3, [sp, #8]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e7d9      	b.n	8003d12 <sniprintf+0x16>
 8003d5e:	bf00      	nop
 8003d60:	20000024 	.word	0x20000024

08003d64 <__malloc_lock>:
 8003d64:	4801      	ldr	r0, [pc, #4]	; (8003d6c <__malloc_lock+0x8>)
 8003d66:	f000 baf9 	b.w	800435c <__retarget_lock_acquire_recursive>
 8003d6a:	bf00      	nop
 8003d6c:	20000204 	.word	0x20000204

08003d70 <__malloc_unlock>:
 8003d70:	4801      	ldr	r0, [pc, #4]	; (8003d78 <__malloc_unlock+0x8>)
 8003d72:	f000 baf4 	b.w	800435e <__retarget_lock_release_recursive>
 8003d76:	bf00      	nop
 8003d78:	20000204 	.word	0x20000204

08003d7c <__ssputs_r>:
 8003d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d80:	688e      	ldr	r6, [r1, #8]
 8003d82:	429e      	cmp	r6, r3
 8003d84:	4682      	mov	sl, r0
 8003d86:	460c      	mov	r4, r1
 8003d88:	4690      	mov	r8, r2
 8003d8a:	461f      	mov	r7, r3
 8003d8c:	d838      	bhi.n	8003e00 <__ssputs_r+0x84>
 8003d8e:	898a      	ldrh	r2, [r1, #12]
 8003d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d94:	d032      	beq.n	8003dfc <__ssputs_r+0x80>
 8003d96:	6825      	ldr	r5, [r4, #0]
 8003d98:	6909      	ldr	r1, [r1, #16]
 8003d9a:	eba5 0901 	sub.w	r9, r5, r1
 8003d9e:	6965      	ldr	r5, [r4, #20]
 8003da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003da8:	3301      	adds	r3, #1
 8003daa:	444b      	add	r3, r9
 8003dac:	106d      	asrs	r5, r5, #1
 8003dae:	429d      	cmp	r5, r3
 8003db0:	bf38      	it	cc
 8003db2:	461d      	movcc	r5, r3
 8003db4:	0553      	lsls	r3, r2, #21
 8003db6:	d531      	bpl.n	8003e1c <__ssputs_r+0xa0>
 8003db8:	4629      	mov	r1, r5
 8003dba:	f7ff ff1b 	bl	8003bf4 <_malloc_r>
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	b950      	cbnz	r0, 8003dd8 <__ssputs_r+0x5c>
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	f8ca 3000 	str.w	r3, [sl]
 8003dc8:	89a3      	ldrh	r3, [r4, #12]
 8003dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dce:	81a3      	strh	r3, [r4, #12]
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd8:	6921      	ldr	r1, [r4, #16]
 8003dda:	464a      	mov	r2, r9
 8003ddc:	f000 fac0 	bl	8004360 <memcpy>
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dea:	81a3      	strh	r3, [r4, #12]
 8003dec:	6126      	str	r6, [r4, #16]
 8003dee:	6165      	str	r5, [r4, #20]
 8003df0:	444e      	add	r6, r9
 8003df2:	eba5 0509 	sub.w	r5, r5, r9
 8003df6:	6026      	str	r6, [r4, #0]
 8003df8:	60a5      	str	r5, [r4, #8]
 8003dfa:	463e      	mov	r6, r7
 8003dfc:	42be      	cmp	r6, r7
 8003dfe:	d900      	bls.n	8003e02 <__ssputs_r+0x86>
 8003e00:	463e      	mov	r6, r7
 8003e02:	6820      	ldr	r0, [r4, #0]
 8003e04:	4632      	mov	r2, r6
 8003e06:	4641      	mov	r1, r8
 8003e08:	f000 fab8 	bl	800437c <memmove>
 8003e0c:	68a3      	ldr	r3, [r4, #8]
 8003e0e:	1b9b      	subs	r3, r3, r6
 8003e10:	60a3      	str	r3, [r4, #8]
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	4433      	add	r3, r6
 8003e16:	6023      	str	r3, [r4, #0]
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e7db      	b.n	8003dd4 <__ssputs_r+0x58>
 8003e1c:	462a      	mov	r2, r5
 8003e1e:	f000 fac7 	bl	80043b0 <_realloc_r>
 8003e22:	4606      	mov	r6, r0
 8003e24:	2800      	cmp	r0, #0
 8003e26:	d1e1      	bne.n	8003dec <__ssputs_r+0x70>
 8003e28:	6921      	ldr	r1, [r4, #16]
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	f7ff fe76 	bl	8003b1c <_free_r>
 8003e30:	e7c7      	b.n	8003dc2 <__ssputs_r+0x46>
	...

08003e34 <_svfiprintf_r>:
 8003e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e38:	4698      	mov	r8, r3
 8003e3a:	898b      	ldrh	r3, [r1, #12]
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	b09d      	sub	sp, #116	; 0x74
 8003e40:	4607      	mov	r7, r0
 8003e42:	460d      	mov	r5, r1
 8003e44:	4614      	mov	r4, r2
 8003e46:	d50e      	bpl.n	8003e66 <_svfiprintf_r+0x32>
 8003e48:	690b      	ldr	r3, [r1, #16]
 8003e4a:	b963      	cbnz	r3, 8003e66 <_svfiprintf_r+0x32>
 8003e4c:	2140      	movs	r1, #64	; 0x40
 8003e4e:	f7ff fed1 	bl	8003bf4 <_malloc_r>
 8003e52:	6028      	str	r0, [r5, #0]
 8003e54:	6128      	str	r0, [r5, #16]
 8003e56:	b920      	cbnz	r0, 8003e62 <_svfiprintf_r+0x2e>
 8003e58:	230c      	movs	r3, #12
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	e0d1      	b.n	8004006 <_svfiprintf_r+0x1d2>
 8003e62:	2340      	movs	r3, #64	; 0x40
 8003e64:	616b      	str	r3, [r5, #20]
 8003e66:	2300      	movs	r3, #0
 8003e68:	9309      	str	r3, [sp, #36]	; 0x24
 8003e6a:	2320      	movs	r3, #32
 8003e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e74:	2330      	movs	r3, #48	; 0x30
 8003e76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004020 <_svfiprintf_r+0x1ec>
 8003e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e7e:	f04f 0901 	mov.w	r9, #1
 8003e82:	4623      	mov	r3, r4
 8003e84:	469a      	mov	sl, r3
 8003e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e8a:	b10a      	cbz	r2, 8003e90 <_svfiprintf_r+0x5c>
 8003e8c:	2a25      	cmp	r2, #37	; 0x25
 8003e8e:	d1f9      	bne.n	8003e84 <_svfiprintf_r+0x50>
 8003e90:	ebba 0b04 	subs.w	fp, sl, r4
 8003e94:	d00b      	beq.n	8003eae <_svfiprintf_r+0x7a>
 8003e96:	465b      	mov	r3, fp
 8003e98:	4622      	mov	r2, r4
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	f7ff ff6d 	bl	8003d7c <__ssputs_r>
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	f000 80aa 	beq.w	8003ffc <_svfiprintf_r+0x1c8>
 8003ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eaa:	445a      	add	r2, fp
 8003eac:	9209      	str	r2, [sp, #36]	; 0x24
 8003eae:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80a2 	beq.w	8003ffc <_svfiprintf_r+0x1c8>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ec2:	f10a 0a01 	add.w	sl, sl, #1
 8003ec6:	9304      	str	r3, [sp, #16]
 8003ec8:	9307      	str	r3, [sp, #28]
 8003eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ece:	931a      	str	r3, [sp, #104]	; 0x68
 8003ed0:	4654      	mov	r4, sl
 8003ed2:	2205      	movs	r2, #5
 8003ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed8:	4851      	ldr	r0, [pc, #324]	; (8004020 <_svfiprintf_r+0x1ec>)
 8003eda:	f7fc f981 	bl	80001e0 <memchr>
 8003ede:	9a04      	ldr	r2, [sp, #16]
 8003ee0:	b9d8      	cbnz	r0, 8003f1a <_svfiprintf_r+0xe6>
 8003ee2:	06d0      	lsls	r0, r2, #27
 8003ee4:	bf44      	itt	mi
 8003ee6:	2320      	movmi	r3, #32
 8003ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eec:	0711      	lsls	r1, r2, #28
 8003eee:	bf44      	itt	mi
 8003ef0:	232b      	movmi	r3, #43	; 0x2b
 8003ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8003efa:	2b2a      	cmp	r3, #42	; 0x2a
 8003efc:	d015      	beq.n	8003f2a <_svfiprintf_r+0xf6>
 8003efe:	9a07      	ldr	r2, [sp, #28]
 8003f00:	4654      	mov	r4, sl
 8003f02:	2000      	movs	r0, #0
 8003f04:	f04f 0c0a 	mov.w	ip, #10
 8003f08:	4621      	mov	r1, r4
 8003f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f0e:	3b30      	subs	r3, #48	; 0x30
 8003f10:	2b09      	cmp	r3, #9
 8003f12:	d94e      	bls.n	8003fb2 <_svfiprintf_r+0x17e>
 8003f14:	b1b0      	cbz	r0, 8003f44 <_svfiprintf_r+0x110>
 8003f16:	9207      	str	r2, [sp, #28]
 8003f18:	e014      	b.n	8003f44 <_svfiprintf_r+0x110>
 8003f1a:	eba0 0308 	sub.w	r3, r0, r8
 8003f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f22:	4313      	orrs	r3, r2
 8003f24:	9304      	str	r3, [sp, #16]
 8003f26:	46a2      	mov	sl, r4
 8003f28:	e7d2      	b.n	8003ed0 <_svfiprintf_r+0x9c>
 8003f2a:	9b03      	ldr	r3, [sp, #12]
 8003f2c:	1d19      	adds	r1, r3, #4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	9103      	str	r1, [sp, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bfbb      	ittet	lt
 8003f36:	425b      	neglt	r3, r3
 8003f38:	f042 0202 	orrlt.w	r2, r2, #2
 8003f3c:	9307      	strge	r3, [sp, #28]
 8003f3e:	9307      	strlt	r3, [sp, #28]
 8003f40:	bfb8      	it	lt
 8003f42:	9204      	strlt	r2, [sp, #16]
 8003f44:	7823      	ldrb	r3, [r4, #0]
 8003f46:	2b2e      	cmp	r3, #46	; 0x2e
 8003f48:	d10c      	bne.n	8003f64 <_svfiprintf_r+0x130>
 8003f4a:	7863      	ldrb	r3, [r4, #1]
 8003f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4e:	d135      	bne.n	8003fbc <_svfiprintf_r+0x188>
 8003f50:	9b03      	ldr	r3, [sp, #12]
 8003f52:	1d1a      	adds	r2, r3, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	9203      	str	r2, [sp, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bfb8      	it	lt
 8003f5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f60:	3402      	adds	r4, #2
 8003f62:	9305      	str	r3, [sp, #20]
 8003f64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004030 <_svfiprintf_r+0x1fc>
 8003f68:	7821      	ldrb	r1, [r4, #0]
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	4650      	mov	r0, sl
 8003f6e:	f7fc f937 	bl	80001e0 <memchr>
 8003f72:	b140      	cbz	r0, 8003f86 <_svfiprintf_r+0x152>
 8003f74:	2340      	movs	r3, #64	; 0x40
 8003f76:	eba0 000a 	sub.w	r0, r0, sl
 8003f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8003f7e:	9b04      	ldr	r3, [sp, #16]
 8003f80:	4303      	orrs	r3, r0
 8003f82:	3401      	adds	r4, #1
 8003f84:	9304      	str	r3, [sp, #16]
 8003f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f8a:	4826      	ldr	r0, [pc, #152]	; (8004024 <_svfiprintf_r+0x1f0>)
 8003f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f90:	2206      	movs	r2, #6
 8003f92:	f7fc f925 	bl	80001e0 <memchr>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d038      	beq.n	800400c <_svfiprintf_r+0x1d8>
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <_svfiprintf_r+0x1f4>)
 8003f9c:	bb1b      	cbnz	r3, 8003fe6 <_svfiprintf_r+0x1b2>
 8003f9e:	9b03      	ldr	r3, [sp, #12]
 8003fa0:	3307      	adds	r3, #7
 8003fa2:	f023 0307 	bic.w	r3, r3, #7
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	9303      	str	r3, [sp, #12]
 8003faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fac:	4433      	add	r3, r6
 8003fae:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb0:	e767      	b.n	8003e82 <_svfiprintf_r+0x4e>
 8003fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	2001      	movs	r0, #1
 8003fba:	e7a5      	b.n	8003f08 <_svfiprintf_r+0xd4>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	3401      	adds	r4, #1
 8003fc0:	9305      	str	r3, [sp, #20]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f04f 0c0a 	mov.w	ip, #10
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fce:	3a30      	subs	r2, #48	; 0x30
 8003fd0:	2a09      	cmp	r2, #9
 8003fd2:	d903      	bls.n	8003fdc <_svfiprintf_r+0x1a8>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0c5      	beq.n	8003f64 <_svfiprintf_r+0x130>
 8003fd8:	9105      	str	r1, [sp, #20]
 8003fda:	e7c3      	b.n	8003f64 <_svfiprintf_r+0x130>
 8003fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e7f0      	b.n	8003fc8 <_svfiprintf_r+0x194>
 8003fe6:	ab03      	add	r3, sp, #12
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	462a      	mov	r2, r5
 8003fec:	4b0f      	ldr	r3, [pc, #60]	; (800402c <_svfiprintf_r+0x1f8>)
 8003fee:	a904      	add	r1, sp, #16
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	f3af 8000 	nop.w
 8003ff6:	1c42      	adds	r2, r0, #1
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	d1d6      	bne.n	8003faa <_svfiprintf_r+0x176>
 8003ffc:	89ab      	ldrh	r3, [r5, #12]
 8003ffe:	065b      	lsls	r3, r3, #25
 8004000:	f53f af2c 	bmi.w	8003e5c <_svfiprintf_r+0x28>
 8004004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004006:	b01d      	add	sp, #116	; 0x74
 8004008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400c:	ab03      	add	r3, sp, #12
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	462a      	mov	r2, r5
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <_svfiprintf_r+0x1f8>)
 8004014:	a904      	add	r1, sp, #16
 8004016:	4638      	mov	r0, r7
 8004018:	f000 f87a 	bl	8004110 <_printf_i>
 800401c:	e7eb      	b.n	8003ff6 <_svfiprintf_r+0x1c2>
 800401e:	bf00      	nop
 8004020:	08006d04 	.word	0x08006d04
 8004024:	08006d0e 	.word	0x08006d0e
 8004028:	00000000 	.word	0x00000000
 800402c:	08003d7d 	.word	0x08003d7d
 8004030:	08006d0a 	.word	0x08006d0a

08004034 <_printf_common>:
 8004034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	4616      	mov	r6, r2
 800403a:	4699      	mov	r9, r3
 800403c:	688a      	ldr	r2, [r1, #8]
 800403e:	690b      	ldr	r3, [r1, #16]
 8004040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004044:	4293      	cmp	r3, r2
 8004046:	bfb8      	it	lt
 8004048:	4613      	movlt	r3, r2
 800404a:	6033      	str	r3, [r6, #0]
 800404c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004050:	4607      	mov	r7, r0
 8004052:	460c      	mov	r4, r1
 8004054:	b10a      	cbz	r2, 800405a <_printf_common+0x26>
 8004056:	3301      	adds	r3, #1
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	0699      	lsls	r1, r3, #26
 800405e:	bf42      	ittt	mi
 8004060:	6833      	ldrmi	r3, [r6, #0]
 8004062:	3302      	addmi	r3, #2
 8004064:	6033      	strmi	r3, [r6, #0]
 8004066:	6825      	ldr	r5, [r4, #0]
 8004068:	f015 0506 	ands.w	r5, r5, #6
 800406c:	d106      	bne.n	800407c <_printf_common+0x48>
 800406e:	f104 0a19 	add.w	sl, r4, #25
 8004072:	68e3      	ldr	r3, [r4, #12]
 8004074:	6832      	ldr	r2, [r6, #0]
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	42ab      	cmp	r3, r5
 800407a:	dc26      	bgt.n	80040ca <_printf_common+0x96>
 800407c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004080:	1e13      	subs	r3, r2, #0
 8004082:	6822      	ldr	r2, [r4, #0]
 8004084:	bf18      	it	ne
 8004086:	2301      	movne	r3, #1
 8004088:	0692      	lsls	r2, r2, #26
 800408a:	d42b      	bmi.n	80040e4 <_printf_common+0xb0>
 800408c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004090:	4649      	mov	r1, r9
 8004092:	4638      	mov	r0, r7
 8004094:	47c0      	blx	r8
 8004096:	3001      	adds	r0, #1
 8004098:	d01e      	beq.n	80040d8 <_printf_common+0xa4>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	68e5      	ldr	r5, [r4, #12]
 800409e:	6832      	ldr	r2, [r6, #0]
 80040a0:	f003 0306 	and.w	r3, r3, #6
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	bf08      	it	eq
 80040a8:	1aad      	subeq	r5, r5, r2
 80040aa:	68a3      	ldr	r3, [r4, #8]
 80040ac:	6922      	ldr	r2, [r4, #16]
 80040ae:	bf0c      	ite	eq
 80040b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b4:	2500      	movne	r5, #0
 80040b6:	4293      	cmp	r3, r2
 80040b8:	bfc4      	itt	gt
 80040ba:	1a9b      	subgt	r3, r3, r2
 80040bc:	18ed      	addgt	r5, r5, r3
 80040be:	2600      	movs	r6, #0
 80040c0:	341a      	adds	r4, #26
 80040c2:	42b5      	cmp	r5, r6
 80040c4:	d11a      	bne.n	80040fc <_printf_common+0xc8>
 80040c6:	2000      	movs	r0, #0
 80040c8:	e008      	b.n	80040dc <_printf_common+0xa8>
 80040ca:	2301      	movs	r3, #1
 80040cc:	4652      	mov	r2, sl
 80040ce:	4649      	mov	r1, r9
 80040d0:	4638      	mov	r0, r7
 80040d2:	47c0      	blx	r8
 80040d4:	3001      	adds	r0, #1
 80040d6:	d103      	bne.n	80040e0 <_printf_common+0xac>
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e0:	3501      	adds	r5, #1
 80040e2:	e7c6      	b.n	8004072 <_printf_common+0x3e>
 80040e4:	18e1      	adds	r1, r4, r3
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	2030      	movs	r0, #48	; 0x30
 80040ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ee:	4422      	add	r2, r4
 80040f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040f8:	3302      	adds	r3, #2
 80040fa:	e7c7      	b.n	800408c <_printf_common+0x58>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4622      	mov	r2, r4
 8004100:	4649      	mov	r1, r9
 8004102:	4638      	mov	r0, r7
 8004104:	47c0      	blx	r8
 8004106:	3001      	adds	r0, #1
 8004108:	d0e6      	beq.n	80040d8 <_printf_common+0xa4>
 800410a:	3601      	adds	r6, #1
 800410c:	e7d9      	b.n	80040c2 <_printf_common+0x8e>
	...

08004110 <_printf_i>:
 8004110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004114:	7e0f      	ldrb	r7, [r1, #24]
 8004116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004118:	2f78      	cmp	r7, #120	; 0x78
 800411a:	4691      	mov	r9, r2
 800411c:	4680      	mov	r8, r0
 800411e:	460c      	mov	r4, r1
 8004120:	469a      	mov	sl, r3
 8004122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004126:	d807      	bhi.n	8004138 <_printf_i+0x28>
 8004128:	2f62      	cmp	r7, #98	; 0x62
 800412a:	d80a      	bhi.n	8004142 <_printf_i+0x32>
 800412c:	2f00      	cmp	r7, #0
 800412e:	f000 80d8 	beq.w	80042e2 <_printf_i+0x1d2>
 8004132:	2f58      	cmp	r7, #88	; 0x58
 8004134:	f000 80a3 	beq.w	800427e <_printf_i+0x16e>
 8004138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800413c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004140:	e03a      	b.n	80041b8 <_printf_i+0xa8>
 8004142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004146:	2b15      	cmp	r3, #21
 8004148:	d8f6      	bhi.n	8004138 <_printf_i+0x28>
 800414a:	a101      	add	r1, pc, #4	; (adr r1, 8004150 <_printf_i+0x40>)
 800414c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004150:	080041a9 	.word	0x080041a9
 8004154:	080041bd 	.word	0x080041bd
 8004158:	08004139 	.word	0x08004139
 800415c:	08004139 	.word	0x08004139
 8004160:	08004139 	.word	0x08004139
 8004164:	08004139 	.word	0x08004139
 8004168:	080041bd 	.word	0x080041bd
 800416c:	08004139 	.word	0x08004139
 8004170:	08004139 	.word	0x08004139
 8004174:	08004139 	.word	0x08004139
 8004178:	08004139 	.word	0x08004139
 800417c:	080042c9 	.word	0x080042c9
 8004180:	080041ed 	.word	0x080041ed
 8004184:	080042ab 	.word	0x080042ab
 8004188:	08004139 	.word	0x08004139
 800418c:	08004139 	.word	0x08004139
 8004190:	080042eb 	.word	0x080042eb
 8004194:	08004139 	.word	0x08004139
 8004198:	080041ed 	.word	0x080041ed
 800419c:	08004139 	.word	0x08004139
 80041a0:	08004139 	.word	0x08004139
 80041a4:	080042b3 	.word	0x080042b3
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	1d1a      	adds	r2, r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	602a      	str	r2, [r5, #0]
 80041b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0a3      	b.n	8004304 <_printf_i+0x1f4>
 80041bc:	6820      	ldr	r0, [r4, #0]
 80041be:	6829      	ldr	r1, [r5, #0]
 80041c0:	0606      	lsls	r6, r0, #24
 80041c2:	f101 0304 	add.w	r3, r1, #4
 80041c6:	d50a      	bpl.n	80041de <_printf_i+0xce>
 80041c8:	680e      	ldr	r6, [r1, #0]
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	2e00      	cmp	r6, #0
 80041ce:	da03      	bge.n	80041d8 <_printf_i+0xc8>
 80041d0:	232d      	movs	r3, #45	; 0x2d
 80041d2:	4276      	negs	r6, r6
 80041d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d8:	485e      	ldr	r0, [pc, #376]	; (8004354 <_printf_i+0x244>)
 80041da:	230a      	movs	r3, #10
 80041dc:	e019      	b.n	8004212 <_printf_i+0x102>
 80041de:	680e      	ldr	r6, [r1, #0]
 80041e0:	602b      	str	r3, [r5, #0]
 80041e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041e6:	bf18      	it	ne
 80041e8:	b236      	sxthne	r6, r6
 80041ea:	e7ef      	b.n	80041cc <_printf_i+0xbc>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	1d19      	adds	r1, r3, #4
 80041f2:	6029      	str	r1, [r5, #0]
 80041f4:	0601      	lsls	r1, r0, #24
 80041f6:	d501      	bpl.n	80041fc <_printf_i+0xec>
 80041f8:	681e      	ldr	r6, [r3, #0]
 80041fa:	e002      	b.n	8004202 <_printf_i+0xf2>
 80041fc:	0646      	lsls	r6, r0, #25
 80041fe:	d5fb      	bpl.n	80041f8 <_printf_i+0xe8>
 8004200:	881e      	ldrh	r6, [r3, #0]
 8004202:	4854      	ldr	r0, [pc, #336]	; (8004354 <_printf_i+0x244>)
 8004204:	2f6f      	cmp	r7, #111	; 0x6f
 8004206:	bf0c      	ite	eq
 8004208:	2308      	moveq	r3, #8
 800420a:	230a      	movne	r3, #10
 800420c:	2100      	movs	r1, #0
 800420e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004212:	6865      	ldr	r5, [r4, #4]
 8004214:	60a5      	str	r5, [r4, #8]
 8004216:	2d00      	cmp	r5, #0
 8004218:	bfa2      	ittt	ge
 800421a:	6821      	ldrge	r1, [r4, #0]
 800421c:	f021 0104 	bicge.w	r1, r1, #4
 8004220:	6021      	strge	r1, [r4, #0]
 8004222:	b90e      	cbnz	r6, 8004228 <_printf_i+0x118>
 8004224:	2d00      	cmp	r5, #0
 8004226:	d04d      	beq.n	80042c4 <_printf_i+0x1b4>
 8004228:	4615      	mov	r5, r2
 800422a:	fbb6 f1f3 	udiv	r1, r6, r3
 800422e:	fb03 6711 	mls	r7, r3, r1, r6
 8004232:	5dc7      	ldrb	r7, [r0, r7]
 8004234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004238:	4637      	mov	r7, r6
 800423a:	42bb      	cmp	r3, r7
 800423c:	460e      	mov	r6, r1
 800423e:	d9f4      	bls.n	800422a <_printf_i+0x11a>
 8004240:	2b08      	cmp	r3, #8
 8004242:	d10b      	bne.n	800425c <_printf_i+0x14c>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	07de      	lsls	r6, r3, #31
 8004248:	d508      	bpl.n	800425c <_printf_i+0x14c>
 800424a:	6923      	ldr	r3, [r4, #16]
 800424c:	6861      	ldr	r1, [r4, #4]
 800424e:	4299      	cmp	r1, r3
 8004250:	bfde      	ittt	le
 8004252:	2330      	movle	r3, #48	; 0x30
 8004254:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800425c:	1b52      	subs	r2, r2, r5
 800425e:	6122      	str	r2, [r4, #16]
 8004260:	f8cd a000 	str.w	sl, [sp]
 8004264:	464b      	mov	r3, r9
 8004266:	aa03      	add	r2, sp, #12
 8004268:	4621      	mov	r1, r4
 800426a:	4640      	mov	r0, r8
 800426c:	f7ff fee2 	bl	8004034 <_printf_common>
 8004270:	3001      	adds	r0, #1
 8004272:	d14c      	bne.n	800430e <_printf_i+0x1fe>
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	b004      	add	sp, #16
 800427a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427e:	4835      	ldr	r0, [pc, #212]	; (8004354 <_printf_i+0x244>)
 8004280:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004284:	6829      	ldr	r1, [r5, #0]
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	f851 6b04 	ldr.w	r6, [r1], #4
 800428c:	6029      	str	r1, [r5, #0]
 800428e:	061d      	lsls	r5, r3, #24
 8004290:	d514      	bpl.n	80042bc <_printf_i+0x1ac>
 8004292:	07df      	lsls	r7, r3, #31
 8004294:	bf44      	itt	mi
 8004296:	f043 0320 	orrmi.w	r3, r3, #32
 800429a:	6023      	strmi	r3, [r4, #0]
 800429c:	b91e      	cbnz	r6, 80042a6 <_printf_i+0x196>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	f023 0320 	bic.w	r3, r3, #32
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	2310      	movs	r3, #16
 80042a8:	e7b0      	b.n	800420c <_printf_i+0xfc>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	f043 0320 	orr.w	r3, r3, #32
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	2378      	movs	r3, #120	; 0x78
 80042b4:	4828      	ldr	r0, [pc, #160]	; (8004358 <_printf_i+0x248>)
 80042b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042ba:	e7e3      	b.n	8004284 <_printf_i+0x174>
 80042bc:	0659      	lsls	r1, r3, #25
 80042be:	bf48      	it	mi
 80042c0:	b2b6      	uxthmi	r6, r6
 80042c2:	e7e6      	b.n	8004292 <_printf_i+0x182>
 80042c4:	4615      	mov	r5, r2
 80042c6:	e7bb      	b.n	8004240 <_printf_i+0x130>
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	6826      	ldr	r6, [r4, #0]
 80042cc:	6961      	ldr	r1, [r4, #20]
 80042ce:	1d18      	adds	r0, r3, #4
 80042d0:	6028      	str	r0, [r5, #0]
 80042d2:	0635      	lsls	r5, r6, #24
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	d501      	bpl.n	80042dc <_printf_i+0x1cc>
 80042d8:	6019      	str	r1, [r3, #0]
 80042da:	e002      	b.n	80042e2 <_printf_i+0x1d2>
 80042dc:	0670      	lsls	r0, r6, #25
 80042de:	d5fb      	bpl.n	80042d8 <_printf_i+0x1c8>
 80042e0:	8019      	strh	r1, [r3, #0]
 80042e2:	2300      	movs	r3, #0
 80042e4:	6123      	str	r3, [r4, #16]
 80042e6:	4615      	mov	r5, r2
 80042e8:	e7ba      	b.n	8004260 <_printf_i+0x150>
 80042ea:	682b      	ldr	r3, [r5, #0]
 80042ec:	1d1a      	adds	r2, r3, #4
 80042ee:	602a      	str	r2, [r5, #0]
 80042f0:	681d      	ldr	r5, [r3, #0]
 80042f2:	6862      	ldr	r2, [r4, #4]
 80042f4:	2100      	movs	r1, #0
 80042f6:	4628      	mov	r0, r5
 80042f8:	f7fb ff72 	bl	80001e0 <memchr>
 80042fc:	b108      	cbz	r0, 8004302 <_printf_i+0x1f2>
 80042fe:	1b40      	subs	r0, r0, r5
 8004300:	6060      	str	r0, [r4, #4]
 8004302:	6863      	ldr	r3, [r4, #4]
 8004304:	6123      	str	r3, [r4, #16]
 8004306:	2300      	movs	r3, #0
 8004308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800430c:	e7a8      	b.n	8004260 <_printf_i+0x150>
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	462a      	mov	r2, r5
 8004312:	4649      	mov	r1, r9
 8004314:	4640      	mov	r0, r8
 8004316:	47d0      	blx	sl
 8004318:	3001      	adds	r0, #1
 800431a:	d0ab      	beq.n	8004274 <_printf_i+0x164>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	079b      	lsls	r3, r3, #30
 8004320:	d413      	bmi.n	800434a <_printf_i+0x23a>
 8004322:	68e0      	ldr	r0, [r4, #12]
 8004324:	9b03      	ldr	r3, [sp, #12]
 8004326:	4298      	cmp	r0, r3
 8004328:	bfb8      	it	lt
 800432a:	4618      	movlt	r0, r3
 800432c:	e7a4      	b.n	8004278 <_printf_i+0x168>
 800432e:	2301      	movs	r3, #1
 8004330:	4632      	mov	r2, r6
 8004332:	4649      	mov	r1, r9
 8004334:	4640      	mov	r0, r8
 8004336:	47d0      	blx	sl
 8004338:	3001      	adds	r0, #1
 800433a:	d09b      	beq.n	8004274 <_printf_i+0x164>
 800433c:	3501      	adds	r5, #1
 800433e:	68e3      	ldr	r3, [r4, #12]
 8004340:	9903      	ldr	r1, [sp, #12]
 8004342:	1a5b      	subs	r3, r3, r1
 8004344:	42ab      	cmp	r3, r5
 8004346:	dcf2      	bgt.n	800432e <_printf_i+0x21e>
 8004348:	e7eb      	b.n	8004322 <_printf_i+0x212>
 800434a:	2500      	movs	r5, #0
 800434c:	f104 0619 	add.w	r6, r4, #25
 8004350:	e7f5      	b.n	800433e <_printf_i+0x22e>
 8004352:	bf00      	nop
 8004354:	08006d15 	.word	0x08006d15
 8004358:	08006d26 	.word	0x08006d26

0800435c <__retarget_lock_acquire_recursive>:
 800435c:	4770      	bx	lr

0800435e <__retarget_lock_release_recursive>:
 800435e:	4770      	bx	lr

08004360 <memcpy>:
 8004360:	440a      	add	r2, r1
 8004362:	4291      	cmp	r1, r2
 8004364:	f100 33ff 	add.w	r3, r0, #4294967295
 8004368:	d100      	bne.n	800436c <memcpy+0xc>
 800436a:	4770      	bx	lr
 800436c:	b510      	push	{r4, lr}
 800436e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004372:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004376:	4291      	cmp	r1, r2
 8004378:	d1f9      	bne.n	800436e <memcpy+0xe>
 800437a:	bd10      	pop	{r4, pc}

0800437c <memmove>:
 800437c:	4288      	cmp	r0, r1
 800437e:	b510      	push	{r4, lr}
 8004380:	eb01 0402 	add.w	r4, r1, r2
 8004384:	d902      	bls.n	800438c <memmove+0x10>
 8004386:	4284      	cmp	r4, r0
 8004388:	4623      	mov	r3, r4
 800438a:	d807      	bhi.n	800439c <memmove+0x20>
 800438c:	1e43      	subs	r3, r0, #1
 800438e:	42a1      	cmp	r1, r4
 8004390:	d008      	beq.n	80043a4 <memmove+0x28>
 8004392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800439a:	e7f8      	b.n	800438e <memmove+0x12>
 800439c:	4402      	add	r2, r0
 800439e:	4601      	mov	r1, r0
 80043a0:	428a      	cmp	r2, r1
 80043a2:	d100      	bne.n	80043a6 <memmove+0x2a>
 80043a4:	bd10      	pop	{r4, pc}
 80043a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043ae:	e7f7      	b.n	80043a0 <memmove+0x24>

080043b0 <_realloc_r>:
 80043b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b4:	4680      	mov	r8, r0
 80043b6:	4614      	mov	r4, r2
 80043b8:	460e      	mov	r6, r1
 80043ba:	b921      	cbnz	r1, 80043c6 <_realloc_r+0x16>
 80043bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043c0:	4611      	mov	r1, r2
 80043c2:	f7ff bc17 	b.w	8003bf4 <_malloc_r>
 80043c6:	b92a      	cbnz	r2, 80043d4 <_realloc_r+0x24>
 80043c8:	f7ff fba8 	bl	8003b1c <_free_r>
 80043cc:	4625      	mov	r5, r4
 80043ce:	4628      	mov	r0, r5
 80043d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d4:	f000 f81b 	bl	800440e <_malloc_usable_size_r>
 80043d8:	4284      	cmp	r4, r0
 80043da:	4607      	mov	r7, r0
 80043dc:	d802      	bhi.n	80043e4 <_realloc_r+0x34>
 80043de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043e2:	d812      	bhi.n	800440a <_realloc_r+0x5a>
 80043e4:	4621      	mov	r1, r4
 80043e6:	4640      	mov	r0, r8
 80043e8:	f7ff fc04 	bl	8003bf4 <_malloc_r>
 80043ec:	4605      	mov	r5, r0
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d0ed      	beq.n	80043ce <_realloc_r+0x1e>
 80043f2:	42bc      	cmp	r4, r7
 80043f4:	4622      	mov	r2, r4
 80043f6:	4631      	mov	r1, r6
 80043f8:	bf28      	it	cs
 80043fa:	463a      	movcs	r2, r7
 80043fc:	f7ff ffb0 	bl	8004360 <memcpy>
 8004400:	4631      	mov	r1, r6
 8004402:	4640      	mov	r0, r8
 8004404:	f7ff fb8a 	bl	8003b1c <_free_r>
 8004408:	e7e1      	b.n	80043ce <_realloc_r+0x1e>
 800440a:	4635      	mov	r5, r6
 800440c:	e7df      	b.n	80043ce <_realloc_r+0x1e>

0800440e <_malloc_usable_size_r>:
 800440e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004412:	1f18      	subs	r0, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	bfbc      	itt	lt
 8004418:	580b      	ldrlt	r3, [r1, r0]
 800441a:	18c0      	addlt	r0, r0, r3
 800441c:	4770      	bx	lr
	...

08004420 <_init>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	bf00      	nop
 8004424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004426:	bc08      	pop	{r3}
 8004428:	469e      	mov	lr, r3
 800442a:	4770      	bx	lr

0800442c <_fini>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr
